name: SpotBugs

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  spotbugs:
    name: Analyze with SpotBugs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: ./.github/actions/setup-java

      - name: Build the project (without tests)
        run: ./mvnw install -Pdistribution -DskipTests

      - name: Resolve dependencies
        run: ./mvnw dependency:resolve -V -e -DskipTests -DexcludeGroupIds=org.infinispan -Dsilent=true

      - name: Fetch all branches
        run: git fetch --prune --unshallow

      - name: Determine base branch
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          else
            BASE_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          fi
          echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV

      - name: Get changed Java files
        run: |
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD -- '*.java' | tr '\n' ' ')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Changed Java files: $CHANGED_FILES"

      - name: Run SpotBugs on changed files
        if: env.CHANGED_FILES != ''
        run: |
            ./mvnw spotbugs:spotbugs -Dspotbugs.include="${{ env.CHANGED_FILES }}"

      - name: Generate Report
        uses: jwgmeligmeyling/spotbugs-github-action@master
        with:
          path: 'infinispan/tools/target/spotbugsXml.xml'



      - name: Comment PR with SpotBugs Summary
        if: github.event_name == 'pull_request' && (steps.check-spotbugs.outputs.has_issues == 'true' || steps.check-spotbugs.outputs.has_high_priority == 'true')
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const fs = require('fs');
            const xml2js = require('xml2js');

            try {
              const xmlData = fs.readFileSync('infinispan/tools/target/spotbugsXml.xml', 'utf8');
              const parser = new xml2js.Parser();

              parser.parseString(xmlData, (err, result) => {
                if (err) {
                  console.error("Error parsing SpotBugs XML:", err);
                  return;
                }

                const bugCount = result.BugCollection.BugInstance ? result.BugCollection.BugInstance.length : 0;
                const highPriorityCount = result.BugCollection.BugInstance ?
                  result.BugCollection.BugInstance.filter(bug => bug.$.priority === '1').length : 0;

                let comment = ## SpotBugs Analysis Results\n\n;

                if (bugCount === 0) {
                  comment += ✅ No issues found!\n;
                } else {
                  if (highPriorityCount > 0) {
                    comment += ❌ **${highPriorityCount} high priority issues found**\n\n;
                  }

                  comment += ⚠️ **${bugCount} total issues detected**\n\n;
                  comment += Please check the uploaded artifacts for detailed reports. Here's a summary of the top issues:\n\n;

                  const topIssues = Math.min(5, bugCount);
                  comment += | Priority | Type | Class | Method | Line |\n;
                  comment += |----------|------|-------|--------|------|\n;

                  for (let i = 0; i < topIssues; i++) {
                    const bug = result.BugCollection.BugInstance[i];
                    const priority = bug.$.priority === '1' ? 'High' : bug.$.priority === '2' ? 'Medium' : 'Low';
                    const type = bug.$.type;
                    const className = bug.Class[0].$.classname.split('.').pop();
                    const method = bug.Method ? bug.Method[0].$.name : 'N/A';
                    const line = bug.SourceLine && bug.SourceLine[0].$.start ? bug.SourceLine[0].$.start : 'N/A';

                    comment += | ${priority} | ${type} | ${className} | ${method} | ${line} |\n;
                  }

                  if (bugCount > topIssues) {
                    comment += \n... and ${bugCount - topIssues} more issues.\n;
                  }

                  comment += \nPlease address these issues before merging this PR.;
                }

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              });
            } catch (error) {
              console.error("Error processing SpotBugs results:", error);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "⚠️ **SpotBugs Analysis**\n\nFailed to process detailed results, but issues were found. Please check the workflow logs and artifacts for more information."
              });
            }
