name: Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "The Infinispan branch to checkout when cutting the release."
        required: true
        default: "main"
      version:
        description: "Release version"
        required: true
      nextVersion:
        description: "Next version"
        required: true
      type:
         type: choice
         description: The type of release
         required: true
         default: default
         options:
            - default
            - latest
            - prerelease

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.INFINISPAN_MAVEN_GPG_ARMORED }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Checkout Source
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch }}
          token: ${{ secrets.INFINISPAN_RELEASE_TOKEN }}

      - name: Configure Git User
        run: |
          git config user.email "infinispan@infinispan.org"
          git config user.name "Infinispan"

      - name: Update proto.lock files
        run: |
          mvn -B clean install -DskipTests -DcommitProtoLockChanges=true -Dcheckstyle.skip

      - name: Set release version
        run: |
          mvn -B versions:set -DprocessAllModules=true -DnewVersion=${{ inputs.version }}
          mvn -B versions:set-property -Dproperty=version.infinispan -DnewVersion=${{ inputs.version }}
          sed -i "s/^:ispn_version:.*\$/:ispn_version: ${{ inputs.version }}/" documentation/src/main/asciidoc/topics/attributes/community-attributes.adoc
          git commit --no-verify -a -m "Releasing ${{ inputs.version }}"

      - name: Publish to Central
        run: mvn -B -Drelease-mode=upstream -Pdistribution -Pcommunity-release -DskipTests clean deploy -Dinfinispan.brand.version=${{ inputs.version }}
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.INFINISPAN_MAVEN_GPG_PASSPHRASE }}

      - name: Tag Release
        run: |
          git tag -a ${{ inputs.version }} -m ${{ inputs.version }} 

      - name: Next Version
        run: |
          mvn -B versions:set -DprocessAllModules=true -DnewVersion=${{ inputs.nextVersion }}
          mvn -B versions:set-property -Dproperty=version.infinispan -DnewVersion=${{ inputs.nextVersion }}
          git commit --no-verify -a -m "Next version ${{ inputs.nextVersion }}"

      - name: Push changes
        run: |
          git push --tags origin ${{ inputs.branch }}

      - name: Create default release
        if: ${{ inputs.type == 'default' }}
        run: |
           gh release create ${{ inputs.version }} --generate-notes --latest=false
        env:
           GITHUB_TOKEN: ${{ secrets.INFINISPAN_RELEASE_TOKEN }}

      -  name: Create pre-release
         if: ${{ inputs.type == 'prerelease' }}
         run: |
            gh release create ${{ inputs.version }} --generate-notes --latest=false --prerelease
         env:
            GITHUB_TOKEN: ${{ secrets.INFINISPAN_RELEASE_TOKEN }}

      -  name: Create latest release
         if: ${{ inputs.type == 'latest' }}
         run: |
            gh release create ${{ inputs.version }} --generate-notes --latest=true
         env:
            GITHUB_TOKEN: ${{ secrets.INFINISPAN_RELEASE_TOKEN }}

      - name: Attach server distribution
        run: |
          gh release upload ${{ inputs.version }} distribution/target/distribution/infinispan-server-${{ inputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.INFINISPAN_RELEASE_TOKEN }}

  published:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: gerdemann/http-status-code@1.1.1
        with:
          url: https://repo1.maven.org/maven2/org/infinispan/infinispan-distribution/${{ inputs.version }}/infinispan-distribution-${{ inputs.version }}.pom
          code: 200
          timeout: 10800000
          interval: 10000

  native-cli:
    needs: published
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022, ubuntu-24.04-arm]
        include:
          - os: ubuntu-latest
            asset_name: linux-x86_64
            gu_binary: gu
          - os: macos-latest
            asset_name: osx-aarch_64
            gu_binary: gu
          - os: windows-2022
            asset_name: windows-x86_64
            gu_binary: gu.cmd
          - os: ubuntu-24.04-arm
            asset_name: linux-aarch_64
            gu_binary: gu
    steps:
      - uses: actions/checkout@v5

      - if: ${{ matrix.os == 'windows-2022' }}
        name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2.0.0

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Release Tag
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.version }}

      - if: ${{ matrix.os == 'windows-2022' }}
        name: Build native executable
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
          mvnw.cmd package -Pdistribution -Pwindows -Pnative -am -pl quarkus/cli
        shell: cmd

      - if: ${{ matrix.os != 'windows-2022' }}
        name: Build native executable
        run: ./mvnw package -Pdistribution -Pnative -am -pl quarkus/cli

      - name: Upload CLI native executable
        id: upload-cli-native-executable
        run: |
          gh release upload ${{ inputs.version }} quarkus/cli/target/infinispan-cli-${{ inputs.version }}-${{ matrix.asset_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.INFINISPAN_RELEASE_TOKEN }}

  images:
    needs: published
    uses: infinispan/infinispan-images/.github/workflows/release.yml@main
    secrets: inherit
    with:
      branch: main
      repository: infinispan/infinispan-images
      ispnVersion: ${{ inputs.version }}
      type: ${{ inputs.type }}

  operator-main:
    needs: images
    if: contains(inputs.version, '.Final')
    uses: infinispan/infinispan-operator/.github/workflows/add_operand.yml@main
    secrets: inherit
    with:
      image: quay.io/infinispan/server:${{ inputs.version }}
      ref: main
      repository: infinispan/infinispan-operator

  operator-2-4-x:
    needs: images
    if: contains(inputs.version, '.Final') && (startsWith(inputs.version, '15.0.') || startsWith(inputs.version, '15.2.'))
    uses: infinispan/infinispan-operator/.github/workflows/add_operand.yml@2.4.x
    secrets: inherit
    with:
      image: quay.io/infinispan/server:${{ inputs.version }}
      ref: 2.4.x
      repository: infinispan/infinispan-operator
