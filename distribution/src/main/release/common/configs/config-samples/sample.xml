<?xml version="1.0" encoding="UTF-8"?>
<infinispan
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="urn:infinispan:config:9.1 http://www.infinispan.org/schemas/infinispan-config-9.1.xsd"
      xmlns="urn:infinispan:config:9.1">

   <!--
      ******************************************************************************************************************

      This is a sample Infinispan configuration XML file.  Sensible defaults are always used if elements are left
      out.  For example, have a look at "minimal.xml" which ships in this same distribution.

      This file considers some popular configurations, some commented out, with references to documentation and
      further reading.

      A summary of the format of this XML file and all available options can be see online:

         http://docs.jboss.org/infinispan/7.0/apidocs/config.html

      ******************************************************************************************************************
   -->

   <!--
   ******************************************************************************************************************

   JGroups transport stack definitions

   ******************************************************************************************************************
   -->

   <jgroups>
      <stack-file name="udp" path="jgroups-udp.xml"/>
      <stack-file name="tcp" path="jgroups-tcp.xml"/>
   </jgroups>

   <!--
   ******************************************************************************************************************

   Sample thread executor definitions. Each executor can be hooked to one or multiple services:

   - The asynchronous listener executor is only useful if you have asynchronous listeners attached. See:
         - http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_listeners_and_notifications for more details
   - The persistence executor is passed down to cache loader/writer implementations to be able to execute tasks in parallel
   - The state transfer executor is used during state transfer, to apply state in parallel
   - The asynchronous transport executor is only useful if you intend to use the async cache API or have configured your cluster to use asynchronous communications.  See:
         - http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_asynchronous_api
         - http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_asynchronous_options
   - The eviction executor is useful when eviction enabled and wish to customize the executor used by the eviction process:
         - http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#eviction_anchor
   - The replication queue executors is useful if you have enabled a Replication Queue and wish to fine tune the scheduled thread that flushes such batch RPCs.  See:
         - http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_replication_queue

   ******************************************************************************************************************
   -->

   <!--
      <threads>
         <thread-factory name="infinispan-factory" group-name="infinispan" thread-name-pattern="%G %i" priority="5"/>
         <cached-thread-pool name="infinispan-cached" thread-factory="infinispan-factory" />
         <blocking-bounded-queue-thread-pool name="infinispan-listener" thread-factory="infinispan-factory" core-threads="1" max-threads="1" queue-length="0" keepalive-time="0" />
         <blocking-bounded-queue-thread-pool name="state-transfer" thread-factory="infinispan-factory" core-threads="1" max-threads="50" queue-length="0" keepalive-time="0" />
         <blocking-bounded-queue-thread-pool name="infinispan-transport" thread-factory="infinispan-factory" core-threads="5" max-threads="10" queue-length="100" keepalive-time="10000" />
         <scheduled-thread-pool name="infinispan-eviction" thread-factory="infinispan-factory" />
         <scheduled-thread-pool name="infinispan-repl-queue" thread-factory="infinispan-factory" />
      </threads>
   -->

   <!--
      ******************************************************************************************************************

      System-wide global settings, which are shared across all caches managed by the same EmbeddedCacheManager:
      - Enables collection of global JMX statistics, and allows you to customize the JMX domain name under which MBeans are registered.

      ******************************************************************************************************************
   -->

   <cache-container name="SampleCacheManager" statistics="true"  default-cache="the-default-cache" shutdown-hook="DEFAULT">

      <!--
         If the transport is omitted, there is no way to create distributed or clustered caches.
         There is no added cost to defining a transport and not creating a cache that uses one, since the transport
         is created and initialized lazily.  By default, the JGroupsTransport is used.

         Note that the JGroups transport uses sensible defaults if no configuration property is defined.

         It also defines the site needed for Infinispan 's cross-site (x-site) replication.

         See:

            https://github.com/infinispan/infinispan-quickstart/tree/master/clustered-cache
            http://docs.jboss.org/infinispan/7.0/apidocs/org/infinispan/remoting/transport/jgroups/JGroupsTransport.html

      -->
      <transport stack="tcp" cluster="infinispan-cluster" node-name="Node-A" machine="m1" rack="r1" site="LON" />

      <!--
         Used to customize the marshaller used to serialize objects and deserialize byte streams.  Also allows you to
         specify custom advancedExternalizers for custom user types.

         See:

            http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_the_role_of_jboss_marshalling
            http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_plugging_infinispan_with_user_defined_externalizers
       -->
      <serialization marshaller="org.infinispan.marshall.TestObjectStreamMarshaller" version="1.0">
         <!-- AdvancedExternalizer defined as inner static class, with id set via XML configuration -->
         <advanced-externalizer id="1234" class="org.infinispan.marshall.AdvancedExternalizerTest$IdViaConfigObj$Externalizer"/>
         <!-- AdvancedExternalizer defined as inner static class, with id set via annotation -->
         <advanced-externalizer class="org.infinispan.marshall.AdvancedExternalizerTest$IdViaAnnotationObj$Externalizer"/>
         <!-- AdvancedExternalizer defined as inner static class, with id set both via XML config and annotation -->
         <advanced-externalizer id="3456" class="org.infinispan.marshall.AdvancedExternalizerTest$IdViaBothObj$Externalizer"/>
      </serialization>

     <jmx domain="org.infinispan" />

      <!--
         ******************************************************************************************************************
         All caches are named caches, and one of those is the default cache,
         according to the default-cache attribute in the cache container.
         Its configuration is inherited by all other named caches
         ******************************************************************************************************************
      -->

   <!--
      Replicated cache with synchronous network calls.
   -->
   <!--
      Other cache attributes that can be configured:
         deadlock-detection-spin :
            Enables deadlock detection
            http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_deadlock_detection

         batching :
            Used to enable invocation batching and allow the use of Cache.startBatch()/endBatch() methods.
            http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_batching

         queue-flush-interval and queue-size:
            They control whether for asynchronous replicated caches, replication queue is enabled
            http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_replication_queue

   -->
   <replicated-cache name="the-default-cache" statistics="true" mode="SYNC" remote-timeout="20000">
      <!--
         Tunes the locking and concurrency characteristics of the cache.

         See:

            http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_locking_and_concurrency
      -->
      <locking isolation="READ_COMMITTED"
         acquire-timeout="20000"
         write-skew="false"
         concurrency-level="5000"
         striping="false"
      />
      <!--
        Used to configure how the cache to react to node failures, split brains etc.
        <partition-handling enabled="true"/>
      -->

      <!--
         Used to register a transaction manager and participate in JTA and XA transactions.

         See:

            http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_transactions
      -->
      <!--
      <transaction
            transaction-manager-lookup="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
            stop-timeout="30000"
            auto-commit="true"
            locking="OPTIMISTIC"
            mode="FULL_XA"
            />
      -->

      <!--
         Used to control whether objects stored in Infinispan nodes are primarily stored as rehydrated Objects or as
         raw byte arrays.  See:

         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_store_as_binary
      -->
      <!--<store-as-binary/>-->

      <!--
         Configures how state is transferred between the nodes
      -->
      <state-transfer enabled="false" timeout="240000" chunk-size="10000" />

      <!--
       When x-site replication is used, configures the site and caches where this (default) cache backs up the data.
      -->
      <!--
      <backups>
          <backup site="NYC" strategy="SYNC" failure-policy="IGNORE" timeout="12003"/>
          <backup site="SFO" strategy="ASYNC"/>
      </backups>
      <backupFor cache="someCache" site="SFO"/>
      -->

   </replicated-cache>


   <!-- A typical, asynchronously replicated, clustered cache -->
   <!--
   <replicated-cache name="asyncCache" mode="ASYNC" />
   -->

   <!--
      An asynchronous replicated cache making use of a replication queue.  See:

         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_replication_queue
   -->
   <!--
   <replicated-cache name="asyncCache" mode="ASYNC" queue-interval="100" queue-size="200"/>
   -->

   <!--
      A cache configured with eviction.

      Expiration interval defines the interval between successive runs
      to purge expired entries from memory and any cache stores.

      See:

         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#eviction_anchor
         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_eviction_examples
   -->
   <!--
   <local-cache name="evictionCache">
      <memory>
        <object size="5000"/>
      </memory>
      <expiration
         interval="500"
         lifespan="60000"
         max-idle="1000"
      />
   </local-cache>
   -->

   <!--
      A persistent cache that stores state on the file system using either write-through or write-behind.

      If passivation is enabled, state is offloaded to the stores _only_ when evicted from memory, giving you
      the effect of paging to disk.  Similarly, when the state is accessed again, it is removed from the cache loader
      and loaded into memory.

      Set 'shared' to true if all instances in the cluster use the same cache loader instance, e.g., are talking to
      the same database.

      If "preload" is true, all keys are loaded from the cache loader into memory upon starting the cache.

      Multiple stores - chaining - is also supported.

      Write-through versus write-behind is controlled via the <async /> element

      See:

         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_persistence
         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_write_through_and_write_behind_caching
   -->
   <local-cache name="writeThroughToFile">
      <persistence passivation="false">
         <file-store path="${java.io.tmpdir}" shared="false" preload="true" purge="true">
            <write-behind modification-queue-size="123" thread-pool-size="22" />
         </file-store>
      </persistence>
   </local-cache>


   <!--
      A cache where data can be evicted if not used after some time, or if it exceeds certain capacity.
      As shown in this example, passivation can be configured so that whenever data is removed due
      eviction/expiration, this is in turn stored in a backend cache store. Afterwards, when data is
      requested, the cache store will be checked and data will be activated and brought back to memory
   -->
   <!--
   <local-cache name="evictionAndPassivationCache">
      <eviction
         max-entries="5000"
         strategy="LIRS"
      />
      <expiration
         interval="500"
         lifespan="60000"
         max-idle="1000"
      />

      <persistence passivation="true">
         <file-store path="${java.io.tmpdir}"/>
      </persistence>
   </local-cache>
   -->

   <!--
      A cache configured with cache invalidation that instead of using state transfer to retrieve data on startup,
      it is configured with a cluster cache loader that allows it to query the cluster for data if not present
      locally. This type of cache loader is particularly interesting for situations where state transfer is a
      lengthy process.
   -->
   <!--
   <invalidation-cache name="invalidatedWithClusterCacheLoaderCache" mode="SYNC" remote-timeout="20000">
      <persistence>
         <cluster-loader remote-timeout="20000" preload="false"/>
      </persistence>
   </namedCache>
   -->

   <!--
      A distributed cache that uses highly scalable, consistent hash based distribution to store entries on remote
      cluster nodes.

      owners: number of owners for each entry.  The larger this number is, the safer your data will be, but the
                 slower the cluster will be.

      See:
         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_distribution_mode
   -->
   <!--
   <distributed-cache name="distributedCache" mode="SYNC" owners="3" l1-lifespan="600000" />
   -->

   <!--
      A cache making use of custom interceptors, to add custom behavior to each cache invocation.  All custom
      interceptors need to extend org.jboss.cache.interceptors.base.CommandInterceptor

      See:
         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_custom_interceptors
   -->
   <!--
   <local-cache name="cacheWithCustomInterceptors">
      <custom-interceptors>
         <interceptor position="first" class="com.mycompany.CustomInterceptor1">
            <property name="com.mycompany.attributeOne">value1</property>
            <property name="com.mycompany.attributeTwo">value2</property>
         </interceptor>
         <interceptor
            position="last"
            class="com.mycompany.CustomInterceptor2"
         />
         <interceptor
            index="3"
            class="com.mycompany.CustomInterceptor1"
         />
         <interceptor
            before="org.infinispanpan.interceptors.CallInterceptor"
            class="com.mycompany.CustomInterceptor2"
         />
         <interceptor
            after="org.infinispanpan.interceptors.CallInterceptor"
            class="com.mycompany.CustomInterceptor1"
         />
      </custom-interceptors>
   </local-cache>
   -->

   <!--
      A transactional cache configured to run in pessimistic mode.
      See:
         http://infinispan.org/docs/7.0.x/user_guide/user_guide.html#_transactions
   -->
   <!--
   <local-cache name="pessimisticCache">

      <transaction
         transaction-manager-lookup="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
         stop-timeout="30000"
         auto-commit="true"
         locking="PESSIMISTIC"
         mode="NON_DURABLE_XA"
         />

   </local-cache>
   -->

   </cache-container>
</infinispan>
