<project name="infinispan-packaging" basedir="." default="package" xmlns:if="ant:if">
   <property name="root.dir" value="${project.build.directory}/../.." />
   <property name="dist.dir" value="${project.build.directory}/distribution" />
   <property name="licenses.xml" value="${project.build.directory}/docs/licenses/licenses.xml" />
   <property name="base.output.dir" value="${dist.dir}/${infinispan.brand.prefix}-${infinispan.brand.version}" />
   <property name="dollar" value="$"/>
   <filterset id="brandfilter" begintoken="${dollar}{" endtoken="}">
      <filter token="infinispan.brand.name" value="${infinispan.brand.name}" />
      <filter token="wildfly.brand.name" value="${wildfly.brand.name}" />
      <filter token="current.year" value="${current.year}" />
   </filterset>

   <target name="package" depends="clean, minimal, all, remote, wf-modules, server" />

   <target name="clean">
      <delete dir="${dist.dir}" />
   </target>

   <target name="minimal">
      <local name="output.dir"/>
      <property name="output.dir" value="${base.output.dir}-minimal" />
      <base-distribution dir="${output.dir}" type="minimal" />

      <!-- Demos -->
      <mkdir dir="${output.dir}/demos" />
      <demo target="${output.dir}" demo="gui" />

      <fix-permissions dir="${output.dir}/bin" />
   </target>

   <target name="all">
      <local name="output.dir"/>
      <property name="output.dir" value="${base.output.dir}-all" />
      <base-distribution dir="${output.dir}" type="all" javadocs="all"/>

      <copy todir="${output.dir}">
         <file file="${org.infinispan:infinispan-remote:jar}" />
         <file file="${org.infinispan:infinispan-cli:jar}" />
         <mapper type="flatten" />
      </copy>

      <!-- Modules -->
      <module dir="${output.dir}" target="modules/infinispan-extended-statistics" module="extended-statistics" artifact="infinispan-extended-statistics" />
      <module dir="${output.dir}" target="modules/persistence/remote" module="persistence/remote" artifact="infinispan-cachestore-remote" />
      <module dir="${output.dir}" target="modules/persistence/rest" module="persistence/rest" artifact="infinispan-cachestore-rest" />
      <module dir="${output.dir}" target="modules/spring" module="spring5" artifact="infinispan-spring5-embedded" />
      <module dir="${output.dir}" target="modules/tools" module="tools" artifact="infinispan-tools" />
      <module dir="${output.dir}" target="modules/tree" module="tree" artifact="infinispan-tree" />

      <!-- Demos -->
      <mkdir dir="${output.dir}/demos" />
      <demo target="${output.dir}" demo="gui" />

      <fix-permissions dir="${output.dir}/bin" />

   </target>

   <target name="remote">
      <local name="output.dir"/>
      <property name="output.dir" value="${base.output.dir}-remote" />
      <sequential>
         <mkdir dir="${output.dir}" />
         <copy todir="${output.dir}">
            <file file="${org.infinispan:infinispan-remote:jar}" />
            <mapper type="flatten" />
         </copy>
         <base-distribution-lib-remote dir="${output.dir}" />
         <base-distribution-common-files dir="${output.dir}" type="remote" />
         <base-distribution-javadocs dir="${output.dir}" type="remote" />
         <base-distribution-licenses dir="${output.dir}"/>
         <delete dir="${output.dir}/bin" />
         <delete dir="${output.dir}/configs" />
         <delete file="${output.dir}/README-GUI-Demo.txt" />
      </sequential>
   </target>

   <target name="wf-modules">
      <local name="output.dir"/>
      <property name="output.dir" value="${project.build.directory}/${infinispan.brand.prefix}-${wildfly.brand.prefix}-modules-${infinispan.brand.version}" />
      <sequential>
         <copy todir="${output.dir}">
            <fileset dir="src/main/release/wildfly-modules" />
            <filterset refid="brandfilter"/>
         </copy>
         <base-distribution-licenses dir="${output.dir}" inclusive="true" database="true"/>
      </sequential>
   </target>

   <target name="server">
      <property name="server.dir" value="${root.dir}/server/integration/build/target/server-distribution-fat/${infinispan.brand.prefix}-server-${infinispan.brand.version}"/>
      <path id="jar.fileset.path">
         <fileset casesensitive="yes" dir="${server.dir}/modules">
            <include name="**/*.jar" />
         </fileset>
      </path>
      <copy todir="${project.build.directory}/server/docs/licenses">
         <fileset dir="${project.build.directory}/docs/licenses" />
      </copy>
      <local name="jar.fileset"/>
      <pathconvert pathsep=" " property="jar.fileset" refid="jar.fileset.path" />
      <local name="temp.file"/>
      <tempfile property="temp.file" destdir="${dist.dir}" prefix="list"/>
      <delete file="${temp.file}"/>
      <echo file="${temp.file}" message="${jar.fileset}"/>
      <java classname="org.infinispan.tools.licenses.LicenseMerger">
         <arg line="-i"/>
         <arg line="-r"/>
         <arg line="${temp.file}"/>
         <arg line="-o"/>
         <arg line="${project.build.directory}/server/docs/licenses/server-licenses.xml"/>
         <arg line="${licenses.xml}"/>
         <arg line="${server.dir}/docs/licenses/full-feature-pack-licenses.xml"/>
         <classpath>
            <pathelement path="${plugin_classpath}" />
         </classpath>
      </java>
      <xslt in="${project.build.directory}/server/docs/licenses/server-licenses.xml" style="src/main/resources/template/licenses.xsl" out="${project.build.directory}/server/docs/licenses/server-licenses.html">
         <param name="product" expression="${infinispan.brand.name}" type="STRING"/>
         <param name="version" expression="${infinispan.brand.version}" type="STRING"/>
      </xslt>
   </target>

   <macrodef name="base-distribution">
      <attribute name="dir" />
      <attribute name="type" />
      <attribute name="javadocs" default="embedded"/>

      <sequential>
         <mkdir dir="@{dir}" />
         <!-- Core JARs -->
         <copy todir="@{dir}">
            <file file="${org.infinispan:infinispan-embedded:jar}" />
            <file file="${org.infinispan:infinispan-embedded-query:jar}" />
            <mapper type="flatten" />
         </copy>
         <base-distribution-lib-embedded dir="@{dir}"/>
         <base-distribution-common-files dir="@{dir}" type="@{type}"/>
         <base-distribution-schema dir="@{dir}" />
         <base-distribution-javadocs dir="@{dir}" type="@{javadocs}"/>
         <base-distribution-configdocs dir="@{dir}" />
         <base-distribution-licenses dir="@{dir}"/>
      </sequential>
   </macrodef>

   <macrodef name="base-distribution-licenses">
      <attribute name="dir" />
      <attribute name="inclusive" default="false" />
      <attribute name="database" default="false" />
      <sequential>
         <mkdir dir="@{dir}/docs/licenses" />
         <copy todir="@{dir}/docs/licenses">
            <fileset dir="target/docs/licenses" />
         </copy>
         <path id="jar.fileset.path">
            <fileset casesensitive="yes" dir="@{dir}">
               <include name="**/*.jar" />
            </fileset>
         </path>
         <local name="jar.fileset"/>
         <pathconvert pathsep=" " property="jar.fileset" refid="jar.fileset.path" />
         <local name="temp.file"/>
         <tempfile property="temp.file" destdir="${dist.dir}" prefix="list"/>
         <delete file="${temp.file}"/>
         <echo file="${temp.file}" message="${jar.fileset}"/>
         <java classname="org.infinispan.tools.licenses.LicenseMerger">
            <arg line="-i" if:true="@{inclusive}"/>
            <arg line="-r"/>
            <arg line="${temp.file}"/>
            <arg line="-o"/>
            <arg line="@{dir}/docs/licenses/licenses.xml"/>
            <arg line="${licenses.xml}" if:true="@{database}"/>
            <classpath>
               <pathelement path="${plugin_classpath}" />
            </classpath>
         </java>
         <xslt in="@{dir}/docs/licenses/licenses.xml" style="src/main/resources/template/licenses.xsl" out="@{dir}/docs/licenses/licenses.html">
            <param name="product" expression="${infinispan.brand.name}" type="STRING"/>
            <param name="version" expression="${infinispan.brand.version}" type="STRING"/>
         </xslt>
      </sequential>
   </macrodef>

   <macrodef name="base-distribution-lib-embedded">
      <attribute name="dir" />
      <sequential>
         <mkdir dir="@{dir}/lib" />
         <copy todir="@{dir}/lib">
            <file file="${javax.cache:cache-api:jar}" />
            <file file="${org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:jar}" />
            <mapper type="flatten" />
         </copy>
      </sequential>
   </macrodef>

   <macrodef name="base-distribution-lib-remote">
      <attribute name="dir" />
      <sequential>
         <mkdir dir="@{dir}/lib" />
         <base-distribution-lib-embedded dir="@{dir}" />
         <copy todir="@{dir}/lib">
            <file file="${javax.enterprise:cdi-api:jar}" />
            <file file="${javax.inject:javax.inject:jar}" />
            <mapper type="flatten" />
         </copy>
      </sequential>
   </macrodef>

   <macrodef name="base-distribution-common-files">
      <attribute name="dir" />
      <attribute name="type" />
      <sequential>
         <copy todir="@{dir}">
            <fileset dir="src/main/release/common"/>
            <fileset dir="src/main/release/@{type}" />
            <filterset refid="brandfilter"/>
         </copy>
      </sequential>
   </macrodef>

   <macrodef name="base-distribution-javadocs">
      <attribute name="dir" />
      <attribute name="type" default="embedded" />
      <sequential>
         <unjar src="${org.infinispan:infinispan-javadoc-@{type}:jar:javadoc}" dest="@{dir}/docs/api" />
      </sequential>
   </macrodef>

   <macrodef name="base-distribution-schema">
      <attribute name="dir" />
      <sequential>
         <mkdir dir="@{dir}/schema" />
         <copy todir="@{dir}/schema">
            <fileset dir="${basedir}/..">
               <include name="**/target/classes/schema/*-${infinispan.core.schema.version}.xsd" />
               <include name="**/src/main/resources/org/infinispan/spring/config/*${infinispan.core.schema.version}.xsd" />
            </fileset>
            <mapper type="flatten" />
         </copy>
      </sequential>
   </macrodef>

   <macrodef name="base-distribution-configdocs">
      <attribute name="dir" />
      <sequential>
         <copy todir="@{dir}/docs/config">
            <fileset dir="${project.build.directory}/site/configdocs" />
         </copy>
      </sequential>
   </macrodef>

   <macrodef name="fix-permissions">
      <attribute name="dir" />

      <sequential>
         <chmod perm="755">
            <fileset dir="@{dir}">
               <include name="**/*.sh" />
            </fileset>
         </chmod>
      </sequential>
   </macrodef>

   <macrodef name="demo">
      <attribute name="target" />
      <attribute name="demo" />

      <sequential>
         <local name="src.dir" />
         <local name="output.dir" />
         <property name="src.dir" value="${root.dir}/demos/@{demo}" />
         <property name="output.dir" value="@{target}/demos/@{demo}" />
         <echo message="ROOT = ${root.dir}"/>
         <mkdir dir="${output.dir}" />
         <copy todir="${output.dir}">
            <fileset dir="${src.dir}/target">
               <include name="*.jar" />
               <include name="*.war" />
               <exclude name="*-tests.jar" />
               <exclude name="*-sources.jar" />
            </fileset>
         </copy>
         <copy todir="@{target}/lib" failonerror="false">
            <fileset dir="${src.dir}/target/dependency">
               <include name="*.jar" />
            </fileset>
         </copy>
         <!-- Copy any executable scripts -->
         <copy todir="@{target}/bin" failonerror="false">
            <fileset dir="${src.dir}/src/main/release/bin">
               <include name="**" />
            </fileset>
         </copy>
         <!-- Copy any support files -->
         <copy todir="${output.dir}/etc" failonerror="false">
            <fileset dir="${src.dir}/src/main/release/etc">
               <include name="**" />
            </fileset>
            <fileset dir="${src.dir}/target">
               <include name="runtime-classpath.txt" />
            </fileset>
         </copy>
      </sequential>
   </macrodef>

   <macrodef name="module">
      <attribute name="dir" />
      <attribute name="target" />
      <attribute name="module" />
      <attribute name="artifact" />
      <attribute name="dependencies" default="true" />

      <sequential>
         <mkdir dir="@{dir}/@{target}" />
         <copy todir="@{dir}/@{target}" failonerror="true">
            <file file="${org.infinispan:@{artifact}:jar}" />
            <mapper type="flatten" />
         </copy>
         <!-- Optionally copy the dependencies and classpath descriptor -->
         <sequential if:true="@{dependencies}">
            <copy todir="@{dir}/lib" failonerror="false">
               <fileset dir="${root.dir}/@{module}/target/dependency">
                  <include name="*.jar" />
               </fileset>
            </copy>
            <copy todir="@{dir}/@{target}" failonerror="false">
               <fileset dir="${root.dir}/@{module}/target">
                  <include name="runtime-classpath.txt" />
               </fileset>
            </copy>
         </sequential>
         <!-- Copy any executable scripts -->
         <copy todir="@{dir}/bin" failonerror="false">
            <fileset dir="${root.dir}/@{module}/src/main/release/bin">
               <include name="**" />
            </fileset>
         </copy>
         <!-- Copy any collateral files -->
         <copy todir="@{dir}/@{target}" failonerror="false">
            <fileset dir="${root.dir}/@{module}/src/main/release">
               <include name="**" />
               <exclude name="bin/**"/>
            </fileset>
            <filterset refid="brandfilter"/>
         </copy>
         <fix-permissions dir="@{dir}/@{target}" />
      </sequential>
   </macrodef>
</project>
