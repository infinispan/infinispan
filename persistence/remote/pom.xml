<?xml version='1.0' encoding='UTF-8'?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <modelVersion>4.0.0</modelVersion>
   <parent>
      <groupId>org.infinispan</groupId>
      <artifactId>infinispan-persistence-parent</artifactId>
      <version>9.1.0-SNAPSHOT</version>
      <relativePath>../pom.xml</relativePath>
   </parent>
   <artifactId>infinispan-cachestore-remote</artifactId>
   <packaging>bundle</packaging>
   <name>Infinispan Remote CacheStore</name>
   <description>Infinispan remote CacheStore based on Hot Rod protocol</description>

   <properties>
      <ca.dname>CN=CA,OU=Infinispan,O=JBoss,L=Red Hat</ca.dname>
      <ca.alias>infinispan-ca</ca.alias>
      <client.dname>CN=HotRodClient1,OU=Infinispan,O=JBoss,L=Red Hat</client.dname>
      <client.alias>client1</client.alias>
      <server.dname>CN=HotRodServer,OU=Infinispan,O=JBoss,L=Red Hat</server.dname>
      <server.alias>hotrod</server.alias>
      <client.keystore>${project.build.testOutputDirectory}/keystore_client.jks</client.keystore>
      <server.keystore>${project.build.testOutputDirectory}/keystore_server.jks</server.keystore>
      <default.password>secret</default.password>
   </properties>

   <dependencies>
      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>infinispan-client-hotrod</artifactId>
      </dependency>
      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>infinispan-client-hotrod</artifactId>
         <type>test-jar</type>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>infinispan-core</artifactId>
      </dependency>
      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>infinispan-server-hotrod</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>infinispan-query-dsl</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>infinispan-server-hotrod</artifactId>
         <type>test-jar</type>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.kohsuke.metainf-services</groupId>
         <artifactId>metainf-services</artifactId>
         <optional>true</optional>
      </dependency>
      <dependency>
         <groupId>org.testng</groupId>
         <artifactId>testng</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.mockito</groupId>
         <artifactId>mockito-core</artifactId>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <build>
      <resources>
         <resource>
            <directory>${project.basedir}/src/main/resources</directory>
            <filtering>true</filtering>
            <includes>
               <include>features.xml</include>
            </includes>
         </resource>
         <resource>
            <directory>${project.basedir}/src/main/resources</directory>
            <filtering>false</filtering>
            <includes>
               <include>schema/*-${infinispan.core.schema.version}.xsd</include>
            </includes>
         </resource>
         <resource>
            <directory>${project.basedir}/src/main/resources</directory>
            <filtering>false</filtering>
            <includes>
               <include>**/*</include>
            </includes>
            <excludes>
               <exclude>features.xml</exclude>
               <exclude>schema/**</exclude>
            </excludes>
         </resource>
      </resources>
      <plugins>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <executions>
               <!-- CA -->
               <execution>
                  <id>ca</id>
                  <goals>
                     <goal>generateKeyPair</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <dname>${ca.dname}</dname>
                     <keystore>${project.build.testOutputDirectory}/ca.jks</keystore>
                     <ext>bc:c</ext>
                  </configuration>
               </execution>
               <execution>
                  <id>ca-export</id>
                  <goals>
                     <goal>exportCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <keystore>${project.build.testOutputDirectory}/ca.jks</keystore>
                     <file>${project.build.testOutputDirectory}/ca.cer</file>
                  </configuration>
               </execution>
               <!-- CA Truststores -->
               <execution>
                  <id>server-truststore-import</id>
                  <goals>
                     <goal>importCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <file>${project.build.testOutputDirectory}/ca.cer</file>
                     <keystore>${project.build.testOutputDirectory}/truststore_server.jks</keystore>
                  </configuration>
               </execution>
               <execution>
                  <id>client-truststore-import</id>
                  <goals>
                     <goal>importCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <file>${project.build.testOutputDirectory}/ca.cer</file>
                     <keystore>${project.build.testOutputDirectory}/truststore_client.jks</keystore>
                  </configuration>
               </execution>
               <!-- Client -->
               <execution>
                  <id>client</id>
                  <goals>
                     <goal>generateKeyPair</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${client.alias}</alias>
                     <dname>${client.dname}</dname>
                     <keystore>${client.keystore}</keystore>
                  </configuration>
               </execution>
               <execution>
                  <id>client-certreq</id>
                  <goals>
                     <goal>generateCertificateRequest</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${client.alias}</alias>
                     <dname>${client.dname}</dname>
                     <file>${project.build.testOutputDirectory}/client1.csr</file>
                     <keystore>${client.keystore}</keystore>
                  </configuration>
               </execution>
               <execution>
                  <id>client-gencert</id>
                  <goals>
                     <goal>generateCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <keystore>${project.build.testOutputDirectory}/ca.jks</keystore>
                     <infile>${project.build.testOutputDirectory}/client1.csr</infile>
                     <outfile>${project.build.testOutputDirectory}/client1.cer</outfile>
                  </configuration>
               </execution>
               <execution>
                  <id>client-import-ca</id>
                  <goals>
                     <goal>importCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <file>${project.build.testOutputDirectory}/ca.cer</file>
                     <keystore>${client.keystore}</keystore>
                  </configuration>
               </execution>
               <execution>
                  <id>client-signed-import</id>
                  <goals>
                     <goal>importCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${client.alias}</alias>
                     <file>${project.build.testOutputDirectory}/client1.cer</file>
                     <keystore>${client.keystore}</keystore>
                  </configuration>
               </execution>
               <!-- Server -->
               <execution>
                  <id>server</id>
                  <goals>
                     <goal>generateKeyPair</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${server.alias}</alias>
                     <dname>${server.dname}</dname>
                     <keystore>${server.keystore}</keystore>
                  </configuration>
               </execution>
               <execution>
                  <id>server-certreq</id>
                  <goals>
                     <goal>generateCertificateRequest</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${server.alias}</alias>
                     <dname>${server.dname}</dname>
                     <file>${project.build.testOutputDirectory}/server.csr</file>
                     <keystore>${server.keystore}</keystore>
                  </configuration>
               </execution>
               <execution>
                  <id>server-gencert</id>
                  <goals>
                     <goal>generateCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <keystore>${project.build.testOutputDirectory}/ca.jks</keystore>
                     <infile>${project.build.testOutputDirectory}/server.csr</infile>
                     <outfile>${project.build.testOutputDirectory}/server.cer</outfile>
                  </configuration>
               </execution>
               <execution>
                  <id>server-import-ca</id>
                  <goals>
                     <goal>importCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${ca.alias}</alias>
                     <file>${project.build.testOutputDirectory}/ca.cer</file>
                     <keystore>${server.keystore}</keystore>
                  </configuration>
               </execution>
               <execution>
                  <id>server-signed-import</id>
                  <goals>
                     <goal>importCertificate</goal>
                  </goals>
                  <phase>generate-test-resources</phase>
                  <configuration>
                     <alias>${server.alias}</alias>
                     <file>${project.build.testOutputDirectory}/server.cer</file>
                     <keystore>${server.keystore}</keystore>
                  </configuration>
               </execution>
            </executions>
            <configuration>
               <keyalg>RSA</keyalg>
               <keysize>2048</keysize>
               <noprompt>true</noprompt>
               <storepass>${default.password}</storepass>
               <keypass>${default.password}</keypass>
               <trustcacerts>true</trustcacerts>
               <validity>365</validity>
               <verbose>true</verbose>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
               <execution>
                  <id>generate-blueprint</id>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <phase>prepare-package</phase>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.felix</groupId>
            <artifactId>maven-bundle-plugin</artifactId>
            <configuration>
               <instructions>
                  <Export-Package>
                     ${project.groupId}.persistence.remote.*;version=${project.version};-split-package:=error
                  </Export-Package>
                  <Include-Resource>
                     {maven-resources},
                     /META-INF/services=${project.basedir}/target/classes/META-INF/services,
                     /OSGI-INF/blueprint/blueprint.xml=${project.basedir}/target/classes/OSGI-INF/blueprint/blueprint.xml
                  </Include-Resource>
               </instructions>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>attach-artifacts</id>
                  <phase>package</phase>
                  <goals>
                     <goal>attach-artifact</goal>
                  </goals>
                  <configuration>
                     <artifacts>
                        <artifact>
                           <file>target/classes/features.xml</file>
                           <type>xml</type>
                           <classifier>features</classifier>
                        </artifact>
                     </artifacts>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>${project.groupId}</groupId>
            <artifactId>infinispan-defaults-maven-plugin</artifactId>
            <version>${project.version}</version>
            <executions>
               <execution>
                  <id>extract-defaults</id>
                  <phase>process-classes</phase>
                  <goals>
                     <goal>extract-defaults</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>

         <!-- Delete the keystores before the keytool plugin runs -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
               <execution>
                  <id>clean-key-stores</id>
                  <phase>process-test-sources</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <tasks>
                        <delete quiet="true">
                           <fileset dir="${project.build.testOutputDirectory}" includes="*.jks,*.csr,*.cer"/>
                        </delete>
                     </tasks>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>
</project>
