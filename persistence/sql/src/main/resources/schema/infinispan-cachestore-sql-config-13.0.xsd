<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0"
           targetNamespace="urn:infinispan:config:store:sql:13.0"
           xmlns:config="urn:infinispan:config:13.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:jdbc-common="urn:infinispan:config:store:jdbc-common:13.0">
  <xs:import namespace="urn:infinispan:config:13.0"
             schemaLocation="https://infinispan.org/schemas/infinispan-config-13.0.xsd" />
  <xs:import namespace="urn:infinispan:config:store:jdbc-common:13.0"
             schemaLocation="https://infinispan.org/schemas/infinispan-jdbc-common-13.0.xsd" />

  <xs:element name="table-jdbc-store">
    <xs:complexType>
      <xs:extension base="abstract-sql-store">
        <xs:attribute name="table-name" type="xs:string">
          <xs:documentation>Defines the Table Name to load and store from. The store will generate statements
            automatically based upon the determined dialect to perform all of its operations. Every field in the key
            schema must be readable from the table columns. However, the table may have more columns than the key and
            schema define if the store does not allow modifications.
          </xs:documentation>
        </xs:attribute>
      </xs:extension>
    </xs:complexType>
  </xs:element>

  <xs:element name="query-jdbc-store">
    <xs:complexType>
      <xs:extension base="abstract-sql-store">
        <xs:element name="queries" type="queries"/>
        <xs:attribute name="key-columns" type="xs:string">
          <xs:annotation>
            <xs:documentation>Defines the column(s) for the query that should be used as the key(s), separated by commas
              as necessary.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="abstract-sql-store">
    <xs:extension base="jdbc-common:abstract-jdbc-store">
      <xs:element name="schema" type="schema"/>
    </xs:extension>
  </xs:complexType>


  <xs:complexType name="schema">
    <xs:attribute name="message-name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The protobuf message name to use for the value in the cache. This can be null if there is only
          one value column in the database, in which case an appropriate type will be used (i.e. Integer, String, Double
          etc.)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="key-message-name" type="xs:string">
      <xs:annotation>
        <xs:documentation>The protobuf message name to use for the key in the cache. This can be null if there is only
          one key column in the database, in which case an appropriate type will be used (i.e. Integer, String, Double
          etc.)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="package" type="xs:string">
      <xs:annotation>
        <xs:documentation>The package used for the key and value message names. This is required if key-message-name or
          message-name is provided
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="embedded-key" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>Configures if the key field(s) are also part of the value schema. Note a single key column
          still does not require a schema when this is true
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="queries">
    <xs:sequence>
      <xs:attribute name="select-all" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>The query to use when bulk-loading into the cache. The asterisk operator is allowed in the
            select clause. This query cannot take any parameters, unless they are explicitly defined in the statement
            (e.g. WHERE FOO = 'BAR'). The columns returned MUST match the columns returned from the select-single query.
            The columns returned MUST also match the key and value proto schema exactly, any less or more will not be
            allowed.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="select-single" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>The query to use when loading into the cache. The asterisk operator is allowed in the
            select clause. This query must have every field from the key schema as a named parameter (e.g. FOO = :bar).
            The columns returned MUST match the columns returned from the select-all query.
            The columns returned MUST also match the key and value proto schema exactly, any less or more will not be
            allowed.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="delete-all" type="xs:string">
        <xs:annotation>
          <xs:documentation>The query to use when clearing the cache. This query cannot take any parameters, unless
            they are explicitly defined in the statement itself (e.g. WHERE FOO = 'BAR'). If the store is configured to
            allow modifications, this attribute is required.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="delete-single" type="xs:string">
        <xs:annotation>
          <xs:documentation>The query to use when deleting a single entry from the cache. This query must have every
            field from the key schema as a named parameter (e.g. FOO = :bar). If the store is configured to allow
            modifications, this attribute is required.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="upsert" type="xs:string">
        <xs:annotation>
          <xs:documentation>The query to use when inserting/updating entries into the cache. This query must have every
            field from the key and value schema as a named parameter (e.g. FOO = :bar). If the store is configured to
            allow modifications, this attribute is required.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="size" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>The query to use to count the number of entries. This query cannot take any parameters,
            unless
            they are explicitly defined in the statement itself (e.g. WHERE FOO = 'BAR').
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:sequence>
  </xs:complexType>

</xs:schema>
