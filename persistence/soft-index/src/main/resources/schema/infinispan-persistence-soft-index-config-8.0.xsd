<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema attributeFormDefault="unqualified"
   elementFormDefault="qualified" version="1.0" targetNamespace="urn:infinispan:config:store:soft-index:8.0"
   xmlns:tns="urn:infinispan:config:store:soft-index:8.0" xmlns:config="urn:infinispan:config:8.0"
   xmlns:xs="http://www.w3.org/2001/XMLSchema">
   <xs:import namespace="urn:infinispan:config:8.0" schemaLocation="http://www.infinispan.org/schemas/infinispan-config-8.0.xsd" />

   <xs:element name="soft-index-file-store" type="tns:soft-index-file-store-type"/>
   
   <xs:complexType name="soft-index-file-store-type">
      <xs:complexContent>
         <xs:extension base="config:store">
            <xs:sequence minOccurs="1" maxOccurs="1">
               <xs:element name="index" type="tns:index-type" minOccurs="0" maxOccurs="1" />
               <xs:element name="data" type="tns:data-type" minOccurs="0" maxOccurs="1" />
            </xs:sequence>

            <xs:attribute name="open-files-limit" type="xs:int" default="1000">
               <xs:annotation>
                  <xs:documentation>
                     Max number of data files opened for reading (current log file, compaction output and index segments are not included here).
                  </xs:documentation>
               </xs:annotation>
            </xs:attribute>
            <xs:attribute name="compaction-threshold" type="xs:double" default="0.5">
               <xs:annotation>
                  <xs:documentation>
                     If amount of unused space in some data file gets above this threshold, the file is compacted - entries from that file are copied to a new file and the old file is deleted.
                  </xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:complexContent>
   </xs:complexType>

   <xs:complexType name="data-type">
      <xs:annotation>
         <xs:documentation>
            Configure where and how should be the entries stored - this is the persistent location.
         </xs:documentation>
      </xs:annotation>
      <xs:attribute name="path" type="xs:string" default="Infinispan-SoftIndexFileStore-Data">
         <xs:annotation>
            <xs:documentation>
               A location on disk where the store writes entries. Files are written sequentially, reads are random.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="max-file-size" type="xs:int" default="1678.016">
         <xs:annotation>
            <xs:documentation>
               Max size of single file with entries, in bytes.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="sync-writes" type="xs:boolean" default="false">
         <xs:annotation>
            <xs:documentation>
               If true, the write is confirmed only after the entry is fsynced on disk.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>

   <xs:complexType name="index-type">
      <xs:annotation>
         <xs:documentation>
            Configure where and how should be the index stored.
         </xs:documentation>
      </xs:annotation>
      <xs:attribute name="path" type="xs:string" default="Infinispan-SotfIndexFileStore-Index">
         <xs:annotation>
            <xs:documentation>
               A location where the store keeps index - this does not have be persistent across restarts, and SSD storage is recommended (the index is accessed randomly).
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="segments" type="xs:int" default="3">
         <xs:annotation>
            <xs:documentation>
               Number of index segment files. Increasing this value improves throughput but requires more threads to be spawned.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="max-queue-length" type="xs:int" default="1000">
         <xs:annotation>
            <xs:documentation>
               Max number of entry writes that are waiting to be written to the index, per index segment.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="max-node-size" type="xs:int" default="4096">
         <xs:annotation>
            <xs:documentation>
               Max size of node (continuous block on filesystem used in index implementation), in bytes.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="min-node-size" type="xs:int" default="4096">
         <xs:annotation>
            <xs:documentation>
               If the size of node (continuous block on filesystem used in index implementation) drops below this threshold, the node will try to balance its size with some neighbour node, possibly causing join of multiple nodes.
            </xs:documentation>
         </xs:annotation>
      </xs:attribute>

   </xs:complexType>


</xs:schema>
