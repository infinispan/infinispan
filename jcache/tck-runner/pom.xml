<?xml version='1.0' encoding='UTF-8'?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <modelVersion>4.0.0</modelVersion>

   <parent>
      <groupId>org.infinispan</groupId>
      <artifactId>infinispan-jcache-parent</artifactId>
      <version>9.4.0-SNAPSHOT</version>
      <relativePath>../pom.xml</relativePath>
   </parent>

   <artifactId>infinispan-jcache-tck-runner</artifactId>
   <packaging>jar</packaging>
   <name>Infinispan JCACHE (JSR-107) TCK Runner</name>
   <description>JCACHE (JSR-107) TCK runner for Infinispan implementations</description>

   <properties>
      <module.skipMavenRemoteResource>true</module.skipMavenRemoteResource>

      <domain-lib-dir>${project.build.directory}/domainlib</domain-lib-dir>
      <domain-jar>domain.jar</domain-jar>
      <tck.mbean.builder>org.infinispan.jcache.tck.TckMbeanServerBuilder</tck.mbean.builder>
      <tck.mbean.server>TckMbeanServer</tck.mbean.server>

      <!-- TODO: do they need to be different? -->
      <embedded.CacheManagerImpl>org.infinispan.jcache.embedded.JCacheManager</embedded.CacheManagerImpl>
      <embedded.CacheImpl>org.infinispan.jcache.embedded.JCache</embedded.CacheImpl>
      <embedded.CacheEntryImpl>org.infinispan.jcache.JCacheEntry</embedded.CacheEntryImpl>
      <embedded.CacheInvocationContextImpl>org.infinispan.jcache.annotation.CacheKeyInvocationContextImpl</embedded.CacheInvocationContextImpl>

      <remote.CacheManagerImpl>org.infinispan.jcache.remote.JCacheManager</remote.CacheManagerImpl>
      <remote.CacheImpl>org.infinispan.jcache.remote.JCache</remote.CacheImpl>
      <remote.CacheEntryImpl>org.infinispan.jcache.JCacheEntry</remote.CacheEntryImpl>
      <remote.CacheInvocationContextImpl>org.infinispan.jcache.annotation.CacheKeyInvocationContextImpl</remote.CacheInvocationContextImpl>

      <server.dir.parent>${project.build.directory}</server.dir.parent>
      <server.dir.name>infinispan-server-${project.version}</server.dir.name>
      <server.dir>${server.dir.parent}/${server.dir.name}</server.dir>
      <serverMemoryJvmArgs>-Xmx500m ${testjvm.commonArgs}</serverMemoryJvmArgs>

      <failsafe.reportdir.embedded>${project.build.directory}/failsafe-reports-embedded</failsafe.reportdir.embedded>
      <failsafe.reportdir.remote>${project.build.directory}/failsafe-reports-remote</failsafe.reportdir.remote>
      <failsafe.summary.embedded>${failsafe.reportdir.embedded}/failsafe-summary.xml</failsafe.summary.embedded>
      <failsafe.summary.remote>${failsafe.reportdir.remote}/failsafe-summary.xml</failsafe.summary.remote>
   </properties>

   <dependencies>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-jcache</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-jcache-remote</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-client-hotrod</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-commons-test</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-core</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.wildfly.core</groupId>
         <artifactId>wildfly-controller</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.infinispan.server</groupId>
         <artifactId>infinispan-server-build</artifactId>
         <version>${project.version}</version>
         <type>pom</type>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.hamcrest</groupId>
         <artifactId>hamcrest-library</artifactId>
         <version>1.2</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>javax.cache</groupId>
         <artifactId>cache-tests</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>javax.cache</groupId>
         <artifactId>cache-tests</artifactId>
         <classifier>tests</classifier>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>javax.cache</groupId>
         <artifactId>cdi-weld-annotations-test-harness</artifactId>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <build>
      <testResources>
         <testResource>
            <directory>src/test/resources</directory>
            <filtering>true</filtering>
         </testResource>
      </testResources>

      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
               <execution>
                  <id>copy-infinispan-server</id>
                  <phase>generate-test-resources</phase>
                  <goals>
                     <goal>copy-resources</goal>
                  </goals>
                  <configuration>
                     <outputDirectory>${server.dir}</outputDirectory>
                        <resources>
                           <resource>
                              <directory>../../server/integration/build/target/infinispan-server-${project.version}/</directory>
                              <filtering>false</filtering>
                           </resource>
                        </resources>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
               <execution>
                  <id>copy-cache-tests</id>
                  <goals>
                     <goal>unpack-dependencies</goal>
                  </goals>
                  <configuration>
                     <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
                     <includeArtifactIds>cache-tests</includeArtifactIds>
                     <includeScope>test</includeScope>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>start-server</id>
                  <phase>pre-integration-test</phase>
                  <goals>
                     <goal>start</goal>
                  </goals>
                  <configuration>
                     <skip>${skipTests}</skip>
                     <jbossHome>${server.dir}</jbossHome>
                     <jvm-args>${serverMemoryJvmArgs} ${testjvm.jigsawArgs}</jvm-args>
                     <!--java-opts>
                        <java-opt>-agentlib:jdwp=transport=dt_socket,address=8787,server=y,suspend=y</java-opt>
                     </java-opts-->
                  </configuration>
               </execution>
               <execution>
                  <id>stop-server</id>
                  <phase>post-integration-test</phase>
                  <goals>
                     <goal>shutdown</goal>
                  </goals>
                  <configuration>
                     <skip>${skipTests}</skip>
                     <jbossHome>${server.dir}</jbossHome>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <executions>
               <execution>
                  <id>default-test</id>
                  <phase>none</phase>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
               <includes>
                  <include>**/Test*.java</include>
                  <include>**/*Test.java</include>
                  <include>**/*TestCase.java</include>
               </includes>
               <systemPropertyVariables>
                  <domainJar>${domain-lib-dir}/${domain-jar}</domainJar>
                  <javax.management.builder.initial>${tck.mbean.builder}</javax.management.builder.initial>
                  <org.jsr107.tck.management.agentId>${tck.mbean.server}</org.jsr107.tck.management.agentId>
                  <log4j.configurationFile>${log4j.configurationFile}</log4j.configurationFile>
                  <java.net.preferIPv4Stack>true</java.net.preferIPv4Stack>
                  <jgroups.join_timeout>2000</jgroups.join_timeout>
               </systemPropertyVariables>
               <argLine>${forkJvmArgs} ${testjvm.jigsawArgs}</argLine>
               <properties>
                  <listener>${junitListener}</listener>
               </properties>
            </configuration>
            <executions>
               <execution>
                  <id>tck-embedded</id>
                  <phase>integration-test</phase>
                  <goals>
                     <goal>integration-test</goal>
                  </goals>
                  <configuration>
                     <summaryFile>${failsafe.summary.embedded}</summaryFile>
                     <reportsDirectory>${failsafe.reportdir.embedded}</reportsDirectory>
                     <classpathDependencyExcludes>
                        <classpathDependencyExcludes>${project.groupId}:infinispan-jcache-remote</classpathDependencyExcludes>
                     </classpathDependencyExcludes>
                     <systemPropertyVariables>
                        <ExcludeList>ExcludeList_embedded</ExcludeList>
                        <javax.cache.Cache>${embedded.CacheImpl}</javax.cache.Cache>
                        <javax.cache.Cache.Entry>${embedded.CacheEntryImpl}</javax.cache.Cache.Entry>
                        <jgroups.join_timeout>2000</jgroups.join_timeout>
                     </systemPropertyVariables>
                  </configuration>
               </execution>
               <execution>
                  <id>verify-tck-embedded</id>
                  <phase>verify</phase>
                  <goals>
                     <goal>verify</goal>
                  </goals>
                  <configuration>
                     <summaryFile>${failsafe.summary.embedded}</summaryFile>
                     <reportsDirectory>${failsafe.reportdir.embedded}</reportsDirectory>
                  </configuration>
               </execution>
               <execution>
                  <id>tck-remote</id>
                  <phase>integration-test</phase>
                  <goals>
                     <goal>integration-test</goal>
                  </goals>
                  <configuration>
                     <summaryFile>${failsafe.summary.remote}</summaryFile>
                     <reportsDirectory>${failsafe.reportdir.remote}</reportsDirectory>
                     <classpathDependencyExcludes>
                        <classpathDependencyExcludes>${project.groupId}:infinispan-jcache</classpathDependencyExcludes>
                     </classpathDependencyExcludes>
                     <systemPropertyVariables>
                        <ExcludeList>ExcludeList_remote</ExcludeList>
                        <javax.cache.Cache>${remote.CacheImpl}</javax.cache.Cache>
                        <javax.cache.Cache.Entry>${remote.CacheEntryImpl}</javax.cache.Cache.Entry>
                        <jgroups.join_timeout>2000</jgroups.join_timeout>
                     </systemPropertyVariables>
                  </configuration>
               </execution>
               <execution>
                  <id>verify-tck-remote</id>
                  <phase>verify</phase>
                  <goals>
                     <goal>verify</goal>
                  </goals>
                  <configuration>
                     <summaryFile>${failsafe.summary.remote}</summaryFile>
                     <reportsDirectory>${failsafe.reportdir.remote}</reportsDirectory>
                  </configuration>
               </execution>
            </executions>
            <dependencies>
               <dependency>
                  <groupId>org.apache.maven.surefire</groupId>
                  <artifactId>surefire-junit47</artifactId>
                  <version>${version.maven.surefire}</version>
               </dependency>
            </dependencies>
         </plugin>

      </plugins>
   </build>

   <profiles>
      <profile>
         <id>test-basic-cache</id>
         <build>
            <plugins>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-failsafe-plugin</artifactId>
                  <configuration>
                     <excludes>
                        <exclude>**/interceptor/*Test.java</exclude>
                     </excludes>
                     <systemPropertyVariables>
                        <domainJar>${domain-lib-dir}/${domain-jar}</domainJar>
                        <jgroups.join_timeout>2000</jgroups.join_timeout>
                     </systemPropertyVariables>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>

      <profile>
         <id>test-optional-cache</id>
         <build>
            <plugins>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-failsafe-plugin</artifactId>
                  <configuration>
                     <includes>
                        <include>**/interceptor/*Test.java</include>
                     </includes>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>

      <profile>
         <id>smoke</id>
         <properties>
            <skipTests>true</skipTests>
         </properties>
         <build>
            <plugins>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <executions>
                     <execution>
                        <id>default-test</id>
                        <phase>none</phase>
                     </execution>
                  </executions>
               </plugin>
               <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-failsafe-plugin</artifactId>
                  <configuration>
                     <skipITs>${skipTests}</skipITs>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>

      <profile>
         <id>jigsaw</id>
         <activation>
            <jdk>[9,)</jdk>
         </activation>
         <build>
            <plugins>
               <plugin>
                  <groupId>org.wildfly.plugins</groupId>
                  <artifactId>wildfly-maven-plugin</artifactId>
                  <!-- we only configure the jigsaw-specific VM options here -->
                  <configuration>
                     <javaOpts>
                        <javaOpt>-Dsun.reflect.debugModuleAccessChecks=true</javaOpt>
                        <javaOpt>--add-opens=java.base/java.lang=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-opens=java.base/java.security=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-exports=java.base/sun.nio.ch=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-opens=java.management/javax.management.openmbean=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-exports=java.security.sasl/com.sun.security.sasl=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-exports=java.security.sasl/com.sun.security.sasl.digest=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-exports=java.security.sasl/com.sun.security.sasl.ntlm=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-exports=jdk.security.jgss/com.sun.security.sasl.gsskerb=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-opens=java.base/java.io=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-opens=java.base/java.nio=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-opens=java.base/java.util=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-opens=java.base/sun.nio.ch=ALL-UNNAMED</javaOpt>
                        <javaOpt>--add-opens=java.base/java.lang.reflect=ALL-UNNAMED</javaOpt>
                     </javaOpts>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>
   </profiles>
</project>
