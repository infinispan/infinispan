<?xml version="1.0" encoding="UTF-8"?>
<infinispan
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="urn:infinispan:config:9.1 http://www.infinispan.org/schemas/infinispan-config-9.1.xsd"
      xmlns="urn:infinispan:config:9.1">

   <cache-container default-cache="default" statistics="false">
      <transport cluster="Infinispan-Query-Cluster"/>
      <jmx duplicate-domains="true" />
      <distributed-cache name="default" mode="SYNC" remote-timeout="20000" statistics="true">
         <locking acquire-timeout="20000" write-skew="false" concurrency-level="500" striping="false" />
         <transaction mode="BATCH" locking="PESSIMISTIC"/>
         <eviction size="-1" strategy="NONE" />
         <expiration max-idle="-1" />
         <indexing index="LOCAL">
            <indexed-entities>
               <indexed-entity>org.infinispan.query.queries.faceting.Car</indexed-entity>
            </indexed-entities>
            <!-- Use our custom IndexManager; TODO autoinject by default? -->
            <property name="hibernate.search.default.indexmanager">org.infinispan.query.indexmanager.InfinispanIndexManager</property>
            <!-- Write indexes in Infinispan -->
            <property name="default.chunk_size">128000</property>
            <!-- The default is 10, but we don't want to waste many cycles in merging
             (tune for writes at cost of reader fragmentation) -->
            <property name="default.indexwriter.merge_factor">30</property>
            <!-- Never create segments larger than 1GB -->
            <property name="default.indexwriter.merge_max_size">1024</property>
            <!-- IndexWriter flush buffer size in MB -->
            <property name="default.indexwriter.ram_buffer_size">256</property>
            <!-- Enable sharding on writers
            <property name="default.sharding_strategy.nbr_of_shards">6</property> -->
            <property name="lucene_version">LUCENE_CURRENT</property>
         </indexing>
         <state-transfer timeout="480000" enabled="true" />
      </distributed-cache>
      <!-- ******************************************************************************* -->
      <!-- Individually configured "named" caches.                                         -->
      <!--                                                                                 -->
      <!-- While default configuration happens to be fine with similar settings across the -->
      <!-- three caches, they should generally be different in a production environment.   -->
      <!--                                                                                 -->
      <!-- Current settings could easily lead to OutOfMemory exception as a CacheStore     -->
      <!-- should be enabled, and maybe distribution is more suited for LuceneIndexesData. -->
      <!-- ******************************************************************************* -->

      <!-- *************************************** -->
      <!--  Cache to store Lucene's file metadata  -->
      <!-- *************************************** -->
      <replicated-cache name="LuceneIndexesMetadata" mode="SYNC" remote-timeout="25000">
         <transaction mode="NONE"/>
         <indexing index="NONE" />
         <state-transfer enabled="true" />
      </replicated-cache>
      <!-- **************************** -->
      <!--  Cache to store Lucene data  -->
      <!-- **************************** -->
      <distributed-cache name="LuceneIndexesData" mode="SYNC" remote-timeout="25000">
         <transaction mode="NONE"/>
         <indexing index="NONE" />
         <state-transfer enabled="true" />
      </distributed-cache>
      <!-- ***************************** -->
      <!--  Cache to store Lucene locks  -->
      <!-- ***************************** -->
      <replicated-cache name="LuceneIndexesLocking" mode="SYNC" remote-timeout="25000">
         <transaction mode="NONE"/>
         <indexing index="NONE" />
         <state-transfer enabled="true" />
      </replicated-cache>
   </cache-container>

</infinispan>
