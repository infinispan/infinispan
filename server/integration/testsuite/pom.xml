<?xml version='1.0' encoding='UTF-8'?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.infinispan.server</groupId>
        <artifactId>infinispan-server-versions</artifactId>
        <version>9.4.24.DevAsyncTouch</version>
        <relativePath>../versions/pom.xml</relativePath>
    </parent>

    <artifactId>infinispan-server-testsuite</artifactId>
    <packaging>jar</packaging>
    <name>Infinispan Server - Test Suite</name>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${versionx.com.fasterxml.jackson.core.jackson-databind}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.infinispan.arquillian.container</groupId>
            <artifactId>infinispan-arquillian-impl</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.logmanager</groupId>
                    <artifactId>jboss-logmanager</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.logging</groupId>
                    <artifactId>jboss-logging-spi</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.remoting3</groupId>
                    <artifactId>remoting-jmx</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.remoting3</groupId>
                    <artifactId>jboss-remoting</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.sasl</groupId>
                    <artifactId>jboss-sasl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-client-hotrod</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.logmanager</groupId>
                    <artifactId>jboss-logmanager</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-commons-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-core</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.logmanager</groupId>
                    <artifactId>jboss-logmanager</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-commons</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.infinispan.protostream</groupId>
            <artifactId>sample-domain-implementation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-security-integrationtests</artifactId>
            <classifier>tests</classifier>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-scripting</artifactId>
            <scope>test</scope>
        </dependency>
       <dependency>
          <groupId>org.infinispan.server</groupId>
          <artifactId>infinispan-server-build</artifactId>
          <type>pom</type>
          <scope>test</scope>
       </dependency>
        <dependency>
            <groupId>org.infinispan.server</groupId>
            <artifactId>infinispan-server-build</artifactId>
            <version>${version.org.infinispan.server-build.old}</version>
            <type>zip</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.directory.server</groupId>
            <artifactId>apacheds-all</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-controller</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-controller-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.infinispan.server</groupId>
            <artifactId>infinispan-server-infinispan</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>ant</groupId>
                    <artifactId>ant</artifactId>
                </exclusion>
            </exclusions>
            <scope>test</scope>
        </dependency>
        <!-- TODO: Make it possible to use a different version of Karaf -->
        <dependency>
            <groupId>org.apache.karaf</groupId>
            <artifactId>apache-karaf</artifactId>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.karaf.features</groupId>
            <artifactId>org.apache.karaf.features.core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam-container-karaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam-junit4</artifactId>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam</artifactId>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam-inject</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-common</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-common-domain</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-cli</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wildfly.extras.creaper</groupId>
            <artifactId>creaper-core</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.as</groupId>
                    <artifactId>jboss-as-controller-client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.as</groupId>
                    <artifactId>jboss-as-cli</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.wildfly.extras.creaper</groupId>
            <artifactId>creaper-commands</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>${appserver.groupId}</groupId>
                    <artifactId>wildfly-patching</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.aesh</groupId>
            <artifactId>aesh</artifactId>
            <scope>test</scope>
        </dependency>
		<dependency>
            <groupId>javax.cache</groupId>
            <artifactId>cache-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-jcache-remote</artifactId>
        </dependency>
       <dependency>
          <groupId>org.apache.felix</groupId>
          <artifactId>org.apache.felix.gogo.runtime</artifactId>
          <version>0.12.1</version>
          <scope>test</scope>
       </dependency>
       <dependency>
          <groupId>org.infinispan</groupId>
          <artifactId>infinispan-server-rest</artifactId>
          <type>test-jar</type>
          <scope>test</scope>
       </dependency>
    </dependencies>

    <properties>
        <test.libs.dir>${project.build.directory}/test-libs</test.libs.dir>

        <h2.server.ip>127.0.0.1</h2.server.ip>
        <h2.server.address>tcp://${h2.server.ip}:9092</h2.server.address>
        <database>h2</database>
        <driver.dir>${test.libs.dir}</driver.dir>
        <driver.jar>h2.jar</driver.jar>
        <driver.class>org.h2.jdbcx.JdbcDataSource</driver.class>

        <connection.url>jdbc:h2:${h2.server.address}/mem:test;DB_CLOSE_DELAY=-1</connection.url>
        <connection.url.other>jdbc:h2:${h2.server.address}/mem:test_other;DB_CLOSE_DELAY=-1</connection.url.other>

        <password>sa</password>
        <username>sa</username>

        <password.other>sa</password.other>
        <username.other>sa</username.other>

        <ispnserver.project.dir>${basedir}/../build</ispnserver.project.dir>
        <server.build.dist>${ispnserver.project.dir}/target/${infinispan.brand.prefix}-server-${infinispan.brand.version}</server.build.dist>

        <server1.dist>${basedir}/target/server/node1</server1.dist>
        <server2.dist>${basedir}/target/server/node2</server2.dist>
        <server3.dist>${basedir}/target/server/node3</server3.dist>
        <server.old.dist>${basedir}/target/server/node_old</server.old.dist>
        <server2.old.dist>${basedir}/target/server/node2_old</server2.old.dist>
        <server3.old.dist>${basedir}/target/server/node3_old</server3.old.dist>

        <old.server.schema.version>8.0</old.server.schema.version>
        <new.server.schema.version>${infinispan.core.schema.version}</new.server.schema.version>

        <start.jboss.as.manually>false</start.jboss.as.manually>

        <resources.dir>${project.build.testOutputDirectory}</resources.dir>

        <serverMemoryJvmArgs>-Xmx300m ${testjvm.commonArgs}</serverMemoryJvmArgs>
        <jvm.x64.args />
        <transport.stack>-Djboss.default.jgroups.stack=${infinispan.test.jgroups.protocol}</transport.stack>

        <node0.ip>127.0.0.1</node0.ip>
        <node1.ip>127.0.0.1</node1.ip>
        <node2.ip>127.0.0.1</node2.ip>
        <node3.ip>127.0.0.1</node3.ip>
        <node0.mgmt.port>9990</node0.mgmt.port>
        <node1.mgmt.port>10090</node1.mgmt.port>
        <node2.mgmt.port>10190</node2.mgmt.port>
        <!-- Default multicast address. -->
        <mcast.ip>234.99.54.14</mcast.ip>
        <jvm.ip.stack>-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv6Addresses=false
            -Djboss.default.multicast.address=${mcast.ip}
        </jvm.ip.stack>
        <server.jvm.args>${testjvm.extraArgs} ${jvm.ip.stack} ${serverMemoryJvmArgs} ${transport.stack} ${jvm.x64.args} ${testjvm.jigsawArgs} -Dansi.strip=${ansi.strip}</server.jvm.args>
        <log4j.configurationFile>log4j2.xml</log4j.configurationFile>
        <suite.manual.phase>integration-test</suite.manual.phase>
        <suite.queries.phase>integration-test</suite.queries.phase>
        <suite.client.local.config>testsuite/standalone-default-local.xml</suite.client.local.config>
        <suite.client.dist.config>testsuite/clustered-default-dist.xml</suite.client.dist.config>
        <suite.client.repl.config>testsuite/clustered-default-repl.xml</suite.client.repl.config>
        <suite.client.local.phase>integration-test</suite.client.local.phase>
        <suite.client.local.domain.phase>none</suite.client.local.domain.phase>
        <suite.client.dist.phase>integration-test</suite.client.dist.phase>
        <suite.client.dist.domain.phase>none</suite.client.dist.domain.phase>
        <suite.client.repl.phase>integration-test</suite.client.repl.phase>
        <suite.client.repl.domain.phase>none</suite.client.repl.domain.phase>
        <suite.security.phase>none</suite.security.phase>
        <suite.smoke.phase>none</suite.smoke.phase>

        <suite.manual.include>**/*.java</suite.manual.include>
        <suite.manual.exclude.groups>
            org.infinispan.server.test.category.ClientSingleNode,org.infinispan.server.test.category.ClientClustered,org.infinispan.server.test.category.Unstable,org.infinispan.server.test.category.Osgi,
            org.infinispan.server.test.category.Queries,org.infinispan.server.test.category.RollingUpgrades,org.infinispan.server.test.category.RollingUpgradesDist
        </suite.manual.exclude.groups>
        <suite.client.arq.domain>suite-client-domain</suite.client.arq.domain>
        <groups.client.local>
            org.infinispan.server.test.category.HotRodSingleNode,
            org.infinispan.server.test.category.RESTSingleNode
        </groups.client.local>
        <groups.client.local.domain>
            org.infinispan.server.test.category.HotRodSingleNodeDomain,
            org.infinispan.server.test.category.MemcachedSingleNodeDomain,
            org.infinispan.server.test.category.RESTSingleNodeDomain
        </groups.client.local.domain>
        <groups.client.clustered>
            org.infinispan.server.test.category.HotRodClustered,
            org.infinispan.server.test.category.RESTClustered
        </groups.client.clustered>
        <groups.client.clustered.domain>
            org.infinispan.server.test.category.HotRodClusteredDomain,
            org.infinispan.server.test.category.MemcachedClusteredDomain,
            org.infinispan.server.test.category.RESTClusteredDomain
        </groups.client.clustered.domain>
        <groups.queries>org.infinispan.server.test.category.Queries</groups.queries>
        <groups.security>org.infinispan.server.test.category.Security</groups.security>
        <groups.unstable>
            org.infinispan.server.test.category.Unstable,org.infinispan.server.test.category.UnstableClientLocal,
            org.infinispan.server.test.category.UnstableClientClustered,org.infinispan.server.test.category.UnstableQueries
        </groups.unstable>

        <!-- KeyStore properties -->
        <ca.dname>CN=CA,OU=Infinispan,O=JBoss,L=Red Hat</ca.dname>
        <ca.alias>infinispan-ca</ca.alias>
        <ca.keystore>${project.build.testOutputDirectory}/ca.jks</ca.keystore>
        <server.dname>CN=HotRod,OU=Infinispan,O=JBoss,L=Red Hat,ST=World,C=WW</server.dname>
        <server.alias>hotrod</server.alias>
        <server.keystore>${project.build.testOutputDirectory}/keystore_server.jks</server.keystore>
        <client1.dname>CN=Client1,OU=Infinispan,O=JBoss,L=Red Hat</client1.dname>
        <client1.alias>client1</client1.alias>
        <client2.dname>CN=Client2,OU=Infinispan,O=JBoss,L=Red Hat</client2.dname>
        <client2.alias>client2</client2.alias>
        <client.keystore>${project.build.testOutputDirectory}/keystore_client.jks</client.keystore>
        <cluster.keystore>${project.build.testOutputDirectory}/cluster.jks</cluster.keystore>
    </properties>

    <build>
        <testResources>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>**/*.jks</exclude>
                    <exclude>**/*.keystore</exclude>
                    <exclude>**/*.keytab</exclude>
                    <exclude>**/*.dat</exclude>
                </excludes>
            </testResource>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*.jks</include>
                    <include>**/*.keystore</include>
                    <include>**/*.keytab</include>
                    <include>**/*.dat</include>
                </includes>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- IMPORTANT: generates META-INF/maven/dependencies.properties required by PAX-EXAM framework -->
            <plugin>
                <groupId>org.apache.servicemix.tooling</groupId>
                <artifactId>depends-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-depends-file</id>
                        <goals>
                            <goal>generate-depends-file</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-test-libs</id>
                        <phase>process-test-resources</phase>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <outputDirectory>${test.libs.dir}</outputDirectory>
                            <stripVersion>true</stripVersion>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.h2database</groupId>
                                    <artifactId>h2</artifactId>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.infinispan</groupId>
                                    <artifactId>infinispan-scripting</artifactId>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                </artifactItem>
                               <artifactItem>
                                  <groupId>io.fabric8</groupId>
                                  <artifactId>agent-bond-agent</artifactId>
                                  <type>jar</type>
                                  <overWrite>true</overWrite>
                               </artifactItem>
                            </artifactItems>
                        </configuration>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-certificates-and-keys</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <macrodef name="keytool">
                                    <attribute name="command"/>
                                    <element name="args"/>
                                    <sequential>
                                        <exec executable="${server.jvm}/bin/keytool">
                                            <arg value="@{command}"/>
                                            <!-- common arguments -->
                                            <arg value="-validity"/>
                                            <arg value="365"/>
                                            <arg value="-keyalg"/>
                                            <arg value="RSA"/>
                                            <arg value="-keysize"/>
                                            <arg value="2048"/>
                                            <arg value="-noprompt"/>
                                            <arg value="-storepass"/>
                                            <arg value="secret"/>
                                            <arg value="-keypass"/>
                                            <arg value="secret"/>
                                            <arg value="-storetype"/>
                                            <arg value="JKS"/>
                                            <!-- additional arguments -->
                                            <args/>
                                        </exec>
                                    </sequential>
                                </macrodef>
                                <delete quiet="true">
                                    <fileset dir="${project.build.testOutputDirectory}" includes="vault/*.keystore,*.jks,*.csr,*.cer"/>
                                </delete>
                                <echo message="Generate the vault keystore"/>
                                <mkdir dir="${project.build.testOutputDirectory}/vault"/>
                                <keytool command="-genseckey">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="ispn-vault"/>
                                        <arg value="-storetype"/>
                                        <arg value="JCEKS"/>
                                        <arg value="-keystore"/>
                                        <arg value="${project.build.testOutputDirectory}/vault/vault.keystore"/>
                                        <arg value="-keyalg"/>
                                        <arg value="AES"/>
                                        <arg value="-keysize"/>
                                        <arg value="128"/>
                                    </args>
                                </keytool>
                                <echo message="Generate the CA"/>
                                <keytool command="-genkeypair">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${ca.alias}"/>
                                        <arg value="-dname"/>
                                        <arg value="${ca.dname}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${ca.keystore}"/>
                                        <arg value="-ext"/>
                                        <arg value="bc:c"/>
                                    </args>
                                </keytool>
                                <echo message="Generate the server keystore"/>
                                <keytool command="-genkeypair">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${server.alias}"/>
                                        <arg value="-dname"/>
                                        <arg value="${server.dname}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${server.keystore}"/>
                                    </args>
                                </keytool>
                                <echo message="Sign the server certificate with the CA"/>
                                <keytool command="-certreq">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${server.alias}"/>
                                        <arg value="-dname"/>
                                        <arg value="${server.dname}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${server.keystore}"/>
                                        <arg value="-file"/>
                                        <arg value="${project.build.testOutputDirectory}/server.csr"/>
                                    </args>
                                </keytool>
                                <keytool command="-gencert">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${ca.alias}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${ca.keystore}"/>
                                        <arg value="-infile"/>
                                        <arg value="${project.build.testOutputDirectory}/server.csr"/>
                                        <arg value="-outfile"/>
                                        <arg value="${project.build.testOutputDirectory}/server.cer"/>
                                        <arg value="-ext"/>
                                        <arg value="san=dns:localhost"/>
                                    </args>
                                </keytool>
                                <keytool command="-importkeystore">
                                    <args>
                                        <arg value="-srcalias"/>
                                        <arg value="${ca.alias}"/>
                                        <arg value="-srcstorepass"/>
                                        <arg value="secret"/>
                                        <arg value="-srckeystore"/>
                                        <arg value="${ca.keystore}"/>
                                        <arg value="-deststorepass"/>
                                        <arg value="secret"/>
                                        <arg value="-destkeystore"/>
                                        <arg value="${server.keystore}"/>
                                    </args>
                                </keytool>
                                <keytool command="-importcert">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${server.alias}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${server.keystore}"/>
                                        <arg value="-file"/>
                                        <arg value="${project.build.testOutputDirectory}/server.cer"/>
                                    </args>
                                </keytool>
                                <echo message="Generate an untrusted server certificate "/>
                                <keytool command="-genkeypair">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${server.alias}"/>
                                        <arg value="-dname"/>
                                        <arg value="${server.dname}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${project.build.testOutputDirectory}/keystore_server_no_ca.jks"/>
                                    </args>
                                </keytool>
                                <echo message="Client store"/>
                                <keytool command="-importkeystore">
                                    <args>
                                        <arg value="-srcalias"/>
                                        <arg value="${ca.alias}"/>
                                        <arg value="-srcstorepass"/>
                                        <arg value="secret"/>
                                        <arg value="-srckeystore"/>
                                        <arg value="${ca.keystore}"/>
                                        <arg value="-deststorepass"/>
                                        <arg value="secret"/>
                                        <arg value="-destkeystore"/>
                                        <arg value="${client.keystore}"/>
                                    </args>
                                </keytool>
                                <echo message="Generate the client certificate"/>
                                <keytool command="-genkeypair">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${client1.alias}"/>
                                        <arg value="-dname"/>
                                        <arg value="${client1.dname}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${client.keystore}"/>
                                    </args>
                                </keytool>
                                <echo message="Sign the client certificate with the CA"/>
                                <keytool command="-certreq">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${client1.alias}"/>
                                        <arg value="-dname"/>
                                        <arg value="${client1.dname}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${client.keystore}"/>
                                        <arg value="-file"/>
                                        <arg value="${project.build.testOutputDirectory}/client1.csr"/>
                                    </args>
                                </keytool>
                                <keytool command="-gencert">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${ca.alias}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${ca.keystore}"/>
                                        <arg value="-infile"/>
                                        <arg value="${project.build.testOutputDirectory}/client1.csr"/>
                                        <arg value="-outfile"/>
                                        <arg value="${project.build.testOutputDirectory}/client1.cer"/>
                                    </args>
                                </keytool>
                                <keytool command="-importcert">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${client1.alias}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${client.keystore}"/>
                                        <arg value="-file"/>
                                        <arg value="${project.build.testOutputDirectory}/client1.cer"/>
                                    </args>
                                </keytool>
                                <echo message="Generate a client certificate which is NOT signed by the CA"/>
                                <keytool command="-genkeypair">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="${client2.alias}"/>
                                        <arg value="-dname"/>
                                        <arg value="${client2.dname}"/>
                                        <arg value="-keystore"/>
                                        <arg value="${client.keystore}"/>
                                    </args>
                                </keytool>
                                <echo message="Generate a key for JGroups encryption"/>
                                <keytool command="-genseckey">
                                    <args>
                                        <arg value="-alias"/>
                                        <arg value="cluster"/>
                                        <arg value="-storetype"/>
                                        <arg value="JCEKS"/>
                                        <arg value="-keystore"/>
                                        <arg value="${cluster.keystore}"/>
                                        <arg value="-keyalg"/>
                                        <arg value="DESEDE"/>
                                        <arg value="-keysize"/>
                                        <arg value="168"/>
                                    </args>
                                </keytool>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-distros-and-configs</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>process-test-resources</phase>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <target>
                                <ant antfile="build-testsuite.xml" inheritRefs="true" target="create-all-distros">
                                    <!--redefine uses properties to be propagated to ant build file, should be plugin bug-->
                                    <property name="test_classpath" refid="maven.test.classpath" />

                                    <property name="database" value="${database}" />
                                    <property name="driver.dir" value="${driver.dir}" />
                                    <property name="driver.jar" value="${driver.jar}" />
                                    <property name="driver.class" value="${driver.class}" />

                                    <property name="connection.url" value="${connection.url}" />
                                    <property name="connection.url.other" value="${connection.url.other}" />

                                    <property name="password" value="${password}" />
                                    <property name="username" value="${username}" />

                                    <property name="password.other" value="${password.other}" />
                                    <property name="username.other" value="${username.other}" />

                                    <property name="new.server.schema.version" value="${new.server.schema.version}" />
                                    <property name="jboss.modules.settings.xml.url" value="${jboss.modules.settings.xml.url}" />
                                </ant>
                                <!-- It happens when you do not specify namespaces in the XSLT templates for the newly added nodes
                                     then the IBM jdk transformation is adding empty namespace there - not possible to influence this
                                     behaviour by any environmental property - this is a bit workaround for it -->
                                <echo message="Removing empty xmlns attributes (xmlns=&apos;&apos;) which IBM JDK could produce" />
                                <replace dir="target" value="">
                                    <include name="server/node*/standalone/configuration/**/*.xml" />
                                    <replacetoken><![CDATA[xmlns=""]]></replacetoken>
                                </replace>
                            </target>
                        </configuration>
                    </execution>
                    <!-- we need to start a special H2 TCP server because we need to be able to connect to it with a
                    specific jdbc connection and verify what is in the DB, this is not possible with default
                    H2 setting -->
                    <execution>
                        <id>check-h2-db-property</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <target name="setup-h2" description="Verify if H2 TCP server will be running">
                                <condition property="run.h2.server">
                                    <equals arg1="${database}" arg2="h2" />
                                </condition>
                                <first id="first.h2.jar">
                                    <fileset dir="${server1.dist}/modules" includes="**/h2-*.jar" />
                                </first>
                                <echo>Run H2 TCP server?: ${run.h2.server}</echo>
                            </target>
                            <exportAntProperties>true</exportAntProperties>
                        </configuration>
                    </execution>
                    <execution>
                        <id>start-h2-tcp-server</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <target name="start-h2" description="Starts Java H2 processes" if="run.h2.server">
                                <echo>Starting H2 TCP server!</echo>
                                <echo>H2 jar: ${driver.dir}/${driver.jar}</echo>
                                <java classname="org.h2.tools.Server" classpath="${driver.dir}/${driver.jar}" fork="true" spawn="true">

                                    <!--do not use forking here because surefire JVM fails and H2 running process is not killed-->
                                    <arg line="-tcp -tcpPort 9092 -tcpAllowOthers" />
                                    <jvmarg value="-Dh2.bindAddress=${h2.server.ip}" />
                                </java>
                            </target>
                        </configuration>
                    </execution>
                    <!-- stop previously started H2 server -->
                    <execution>
                        <id>stop-h2-tcp-server</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <target name="stop-h2" description="Stops Java H2 processes" if="run.h2.server">
                                <echo>Stopping H2 TCP server!</echo>
                                <echo>H2 jar: ${driver.dir}/${driver.jar}</echo>
                                <java classname="org.h2.tools.Server" classpath="${driver.dir}/${driver.jar}">
                                    <arg line="-tcpShutdown ${h2.server.address} -tcpShutdownForce" />
                                </java>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <forkMode>once</forkMode>
                    <failIfNoTests>false</failIfNoTests>
                    <excludedGroups>${groups.unstable}</excludedGroups>
                    <disableXmlReport>false</disableXmlReport>
                    <systemPropertyVariables>
                        <server1.dist>${server1.dist}</server1.dist>
                        <server2.dist>${server2.dist}</server2.dist>
                        <server3.dist>${server3.dist}</server3.dist>
                        <server.old.dist>${server.old.dist}</server.old.dist>
                        <server2.old.dist>${server2.old.dist}</server2.old.dist>
                        <server3.old.dist>${server3.old.dist}</server3.old.dist>
                        <old.server.schema.version>${old.server.schema.version}</old.server.schema.version>
                        <new.server.schema.version>${new.server.schema.version}</new.server.schema.version>
                        <start.jboss.as.manually>${start.jboss.as.manually}</start.jboss.as.manually>
                        <server.jvm>${server.jvm}</server.jvm>
                        <server.jvm.args>${server.jvm.args}</server.jvm.args>
                        <hotrod.protocol.version>${hotrod.protocol.version}</hotrod.protocol.version>
                        <log4j.configurationFile>${log4j.configurationFile}</log4j.configurationFile>
                        <java.util.logging.config.file>${resources.dir}/jul.properties</java.util.logging.config.file>
                        <resources.dir>${project.build.directory}/test-classes</resources.dir>
                        <version.karaf>${version.karaf}</version.karaf>

                        <!--redefine jdbc properties-->
                        <database>${database}</database>
                        <driver.dir>${driver.dir}</driver.dir>
                        <driver.jar>${driver.jar}</driver.jar>
                        <driver.class>${driver.class}</driver.class>

                        <connection.url>${connection.url}</connection.url>
                        <connection.url.other>${connection.url.other}</connection.url.other>

                        <username>${username}</username>
                        <password>${password}</password>

                        <username.other>${username.other}</username.other>
                        <password.other>${password.other}</password.other>

                        <!--add for testing rebalancing-->
                        <node0.ip>${node0.ip}</node0.ip>
                        <node1.ip>${node1.ip}</node1.ip>
                        <node2.ip>${node2.ip}</node2.ip>
                        <node0.mgmt.port>${node0.mgmt.port}</node0.mgmt.port>
                        <node1.mgmt.port>${node1.mgmt.port}</node1.mgmt.port>
                        <node2.mgmt.port>${node2.mgmt.port}</node2.mgmt.port>

                        <server.jmx.domain>jboss.datagrid-infinispan</server.jmx.domain>
                    </systemPropertyVariables>
                    <!--add jdbc driver to classpath-->
                    <additionalClasspathElements>
                        <element>${driver.dir}/${driver.jar}</element>
                    </additionalClasspathElements>
                    <properties>
                        <usedefaultlisteners>false</usedefaultlisteners>
                        <listener>${junitListener}</listener>
                    </properties>
                </configuration>
                <executions>
                    <execution>
                        <id>suite-manual</id>
                        <phase>${suite.manual.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>${suite.manual.include}</include>
                            </includes>
                            <excludedGroups>${suite.manual.exclude.groups}</excludedGroups>
                            <groups>${suite.manual.include.groups}</groups>
                            <systemPropertyVariables>
                                <arquillian.launch>suite-manual</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-manual</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-queries</id>
                        <phase>${suite.queries.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <groups>${groups.queries}</groups>
                            <systemPropertyVariables>
                                <arquillian.launch>queries</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-queries</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-client-local</id>
                        <phase>${suite.client.local.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>localmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>${groups.client.local}</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>local</clustering.mode>
                                <arquillian.launch>suite-client-local</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-client-local</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-memcached-local</id>
                        <phase>${suite.client.local.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>localmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>org.infinispan.server.test.category.MemcachedSingleNode</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>local</clustering.mode>
                                <arquillian.launch>suite-memcached-local</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-memcached-local</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-client-local-domain</id>
                        <phase>${suite.client.local.domain.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>localmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>${groups.client.local.domain}</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>local</clustering.mode>
                                <arquillian.launch>${suite.client.arq.domain}</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-client-domain-local</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-client-dist</id>
                        <phase>${suite.client.dist.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>distmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>${groups.client.clustered}</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>dist</clustering.mode>
                                <arquillian.launch>suite-client-dist</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-client-dist</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-memcached-dist</id>
                        <phase>${suite.client.dist.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>distmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>org.infinispan.server.test.category.MemcachedClustered</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>dist</clustering.mode>
                                <arquillian.launch>suite-memcached-dist</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-memcached-dist</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-client-dist-domain</id>
                        <phase>${suite.client.dist.domain.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>distmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>${groups.client.clustered.domain}</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>dist</clustering.mode>
                                <arquillian.launch>${suite.client.arq.domain}</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-client-domain-dist</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-client-repl</id>
                        <phase>${suite.client.repl.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>replmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>${groups.client.clustered}</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>repl</clustering.mode>
                                <arquillian.launch>suite-client-repl</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-client-repl</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-client-repl-domain</id>
                        <phase>${suite.client.repl.domain.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <reportNameSuffix>replmode-${infinispan.test.jgroups.protocol}</reportNameSuffix>
                            <groups>${groups.client.clustered.domain}</groups>
                            <excludedGroups>${groups.unstable}</excludedGroups>
                            <systemPropertyVariables>
                                <clustering.mode>repl</clustering.mode>
                                <arquillian.launch>${suite.client.arq.domain}</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-client-domain-repl</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-security</id>
                        <phase>${suite.security.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <groups>${groups.security}</groups>
                            <systemPropertyVariables>
                                <arquillian.launch>${suite.security.arquillian}</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-security</infinispan.module-suffix>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>suite-smoke</id>
                        <phase>${suite.smoke.phase}</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <groups>org.infinispan.commons.test.categories.Smoke</groups>
                            <excludedGroups>${groups.unstable}, org.infinispan.server.test.category.MemcachedClustered</excludedGroups>
                            <systemPropertyVariables>
                                <arquillian.launch>suite-client-dist</arquillian.launch>
                                <infinispan.module-suffix>${infinispan.module-suffix}-smoke</infinispan.module-suffix>
                            </systemPropertyVariables>
                           </configuration>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-antrun-plugin</artifactId>
                                        <versionRange>[1.7,)</versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-dependency-plugin</artifactId>
                                        <versionRange>[2.6,)</versionRange>
                                        <goals>
                                            <goal>copy</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.servicemix.tooling</groupId>
                                        <artifactId>depends-maven-plugin</artifactId>
                                        <versionRange>[1.2,)</versionRange>
                                        <goals>
                                            <goal>generate-depends-file</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>standalone</id>
            <activation>
                <property>
                    <name>!domain</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-managed</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.jboss.remotingjmx</groupId>
                    <artifactId>remoting-jmx</artifactId>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>domain</id>
            <activation>
                <property>
                    <name>domain</name>
                </property>
            </activation>
            <properties>
                <suite.queries.phase>none</suite.queries.phase>
                <suite.manual.phase>none</suite.manual.phase>
                <suite.client.local.phase>none</suite.client.local.phase>
                <suite.client.dist.phase>none</suite.client.dist.phase>
                <suite.client.repl.phase>none</suite.client.repl.phase>
                <suite.client.local.domain.phase>integration-test</suite.client.local.domain.phase>
                <suite.client.dist.domain.phase>integration-test</suite.client.dist.domain.phase>
                <suite.client.repl.domain.phase>integration-test</suite.client.repl.domain.phase>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-domain-managed</artifactId>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>suite.client</id>
            <properties>
                <suite.manual.phase>none</suite.manual.phase>
                <suite.client.local.phase>integration-test</suite.client.local.phase>
                <suite.client.dist.phase>integration-test</suite.client.dist.phase>
                <suite.client.repl.phase>integration-test</suite.client.repl.phase>
            </properties>
        </profile>
        <profile>
            <id>smoke</id>
            <properties>
                <suite.smoke.phase>integration-test</suite.smoke.phase>
                <suite.manual.phase>none</suite.manual.phase>
                <suite.manual.include.groups>org.infinispan.commons.test.categories.Smoke</suite.manual.include.groups>
                <suite.queries.phase>none</suite.queries.phase>
                <suite.client.local.phase>none</suite.client.local.phase>
                <suite.client.dist.phase>none</suite.client.dist.phase>
                <suite.client.repl.phase>none</suite.client.repl.phase>
            </properties>
        </profile>
        <profile>
            <id>suite.queries</id>
            <properties>
                <suite.manual.phase>none</suite.manual.phase>
                <suite.queries.phase>integration-test</suite.queries.phase>
                <suite.client.local.phase>none</suite.client.local.phase>
                <suite.client.dist.phase>none</suite.client.dist.phase>
                <suite.client.repl.phase>none</suite.client.repl.phase>
            </properties>
        </profile>
        <profile>
            <id>suite.rolling.upgrades.jbossas</id>
            <properties>
                <suite.manual.phase>integration-test</suite.manual.phase>
                <suite.queries.phase>none</suite.queries.phase>
                <suite.client.local.phase>none</suite.client.local.phase>
                <suite.client.dist.phase>none</suite.client.dist.phase>
                <suite.client.repl.phase>none</suite.client.repl.phase>
                <!--don't use controller.start("any-jboss-as-old"); code in test -->
                <start.jboss.as.manually>true</start.jboss.as.manually>
            </properties>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>server.old.jvm</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>infinispan-server-startup</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11322" />
                                        </ant>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="start-server">
                                            <property name="server.jvm" value="${server.old.jvm}" />
                                            <property name="server.dist" value="${server.old.dist}" />
                                            <property name="port.offset" value="100" />
                                            <property name="management.port" value="10090" />
                                            <property name="hotrod.port" value="11322" />
                                            <property name="jboss.node.name" value="node1" />
                                            <property name="jboss.config.file" value="standalone.xml" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infinispan-server-shutdown</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11322" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>suite.rolling.upgrades.dist.jbossas</id>
            <properties>
                <suite.manual.phase>integration-test</suite.manual.phase>
                <suite.queries.phase>none</suite.queries.phase>
                <suite.client.local.phase>none</suite.client.local.phase>
                <suite.client.dist.phase>none</suite.client.dist.phase>
                <suite.client.repl.phase>none</suite.client.repl.phase>
                <!--don't use controller.start("any-jboss-as-old"); code in test -->
                <start.jboss.as.manually>true</start.jboss.as.manually>
            </properties>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>server.old.jvm</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>infinispan-server-startup-200</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11422" />
                                        </ant>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="start-server">
                                            <property name="server.jvm" value="${server.old.jvm}" />
                                            <property name="server.dist" value="${server2.old.dist}" />
                                            <property name="port.offset" value="200" />
                                            <property name="management.port" value="10190" />
                                            <property name="hotrod.port" value="11422" />
                                            <property name="jboss.node.name" value="node2" />
                                            <property name="jboss.config.file" value="clustered.xml" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infinispan-server-startup-300</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11522" />
                                        </ant>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="start-server">
                                            <property name="server.jvm" value="${server.old.jvm}" />
                                            <property name="server.dist" value="${server3.old.dist}" />
                                            <property name="port.offset" value="300" />
                                            <property name="management.port" value="10290" />
                                            <property name="hotrod.port" value="11522" />
                                            <property name="jboss.node.name" value="node3" />
                                            <property name="jboss.config.file" value="clustered.xml" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infinispan-server-shutdown-200</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11422" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infinispan-server-shutdown-300</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11522" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>suite.security</id>
            <properties>
                <suite.manual.phase>none</suite.manual.phase>
                <suite.queries.phase>none</suite.queries.phase>
                <suite.client.local.phase>none</suite.client.local.phase>
                <suite.client.dist.phase>none</suite.client.dist.phase>
                <suite.client.repl.phase>none</suite.client.repl.phase>
                <suite.security.phase>integration-test</suite.security.phase>
                <suite.security.arquillian>suite-manual</suite.security.arquillian>
            </properties>
        </profile>
        <profile>
            <id>client.hotrod.osgi</id>
            <properties>
                <suite.manual.phase>integration-test</suite.manual.phase>
                <suite.queries.phase>none</suite.queries.phase>
                <suite.client.local.phase>none</suite.client.local.phase>
                <suite.client.dist.phase>none</suite.client.dist.phase>
                <suite.client.repl.phase>none</suite.client.repl.phase>
                <suite.manual.exclude.groups />
                <suite.manual.include.groups>org.infinispan.server.test.category.Osgi</suite.manual.include.groups>
                <suite.manual.include>org/infinispan/server/test/client/hotrod/osgi/*IT.java</suite.manual.include>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>infinispan-server-startup</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11222" />
                                        </ant>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="start-server">
                                            <property name="server.dist" value="${server1.dist}" />
                                            <property name="port.offset" value="0" />
                                            <property name="management.port" value="9990" />
                                            <property name="hotrod.port" value="11222" />
                                            <property name="jboss.node.name" value="ispn-server" />
                                            <property name="jboss.config.file" value="testsuite/clustered-indexing.xml" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infinispan-server-shutdown</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <target>
                                        <ant antfile="${basedir}/../src/main/ant/infinispan-server.xml" target="kill-server">
                                            <property name="hotrod.port" value="11222" />
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>ipv6</id>
            <activation>
                <property>
                    <name>ts.ipv6</name>
                </property>
            </activation>
            <properties>
                <!-- Override IPv4 defaults from the top. -->
                <h2.server.ip>[::1]</h2.server.ip>
                <!--<h2.server.address>tcp://${h2.server.ip}:9092</h2.server.address>-->

                <node0.ip>[::1]</node0.ip>
                <node1.ip>[::1]</node1.ip>
                <node2.ip>[::1]</node2.ip>
                <!-- ff01::1  is IPv6 Node-Local scope mcast addr. -->
                <mcast.ip>[ff01::1]</mcast.ip>
                <jvm.ip.stack>-Djava.net.preferIPv4Stack=false -Djava.net.preferIPv6Addresses=true
                    -Djboss.default.multicast.address=${mcast.ip}
                </jvm.ip.stack>
            </properties>
        </profile>

        <profile>
            <id>test-unstable</id>
            <properties>
                <groups.unstable />
                <suite.manual.exclude.groups />
                <suite.manual.include.groups>org.infinispan.server.test.category.Unstable</suite.manual.include.groups>
                <groups.queries>org.infinispan.server.test.category.UnstableQueries</groups.queries>
                <groups.client.local>org.infinispan.server.test.category.UnstableClientLocal</groups.client.local>
                <groups.client.clustered>org.infinispan.server.test.category.UnstableClientClustered</groups.client.clustered>
            </properties>
        </profile>

        <profile>
            <id>unpack-old-server</id>
            <activation>
                <property>
                    <name>!zip.dist.old</name>
                </property>
            </activation>
            <properties>
                <hotrod.protocol.version>2.5</hotrod.protocol.version>
            </properties>
            <build>
                <plugins>
                    <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>copy-old-server</id>
                            <phase>generate-resources</phase>
                            <configuration>
                                <skip>${skipTests}</skip>
                                <outputDirectory>${server.old.dist}-tmp</outputDirectory>
                                <stripVersion>true</stripVersion>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>org.infinispan.server</groupId>
                                        <artifactId>infinispan-server-build</artifactId>
                                        <type>zip</type>
                                        <overWrite>true</overWrite>
                                    </artifactItem>
                                </artifactItems>
                            </configuration>
                            <goals>
                                <goal>unpack</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
