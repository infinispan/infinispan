<project name="testsuite" basedir="." default="create-all-distros">

    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${test_classpath}" />
    <property name="default.transform" value="${resources.dir}/config/xslt/config-modifier.xsl" />
    <property name="default.transform.rest" value="${resources.dir}/config/xslt/rest-sec-config-modifier.xsl" />
    <property name="server1.configs" value="${server1.dist}/standalone/configuration" />
    <property name="server2.configs" value="${server2.dist}/standalone/configuration" />
    <property name="server3.configs" value="${server3.dist}/standalone/configuration" />
    <property name="resources.configs" value="${resources.dir}/config" />
    <property name="infinispan.parts" value="file:///${resources.configs}/infinispan" />
    <property name="datasource.parts" value="file:///${resources.configs}/datasource" />
    <property name="other.parts" value="file:///${resources.configs}/parts" />
    <property name="leveldb.compression" value="SNAPPY" />
    <property name="leveldb.impl" value="JAVA" />
    <property name="leveldb.patch" value="false" />
    <property name="zip.dist" value="false" />
    <property name="zip.dist.old" value="false" />
    <property name="log.level.infinispan" value="INFO"/>
    <property name="log.level.jgroups" value="INFO"/>
    <property name="log.level.console" value="INFO"/>
    <property name="new.server.schema.version" value="${new.server.schema.version}"/>

    <filterset id="commonFilters" begintoken="${" endtoken="}">
        <filter token="leveldb.compression" value="${leveldb.compression}" />
        <filter token="leveldb.impl" value="${leveldb.impl}" />
        <filter token="resources.dir" value="${resources.dir}" />
    </filterset>

    <filterset id="dbFilters" begintoken="${" endtoken="}">
        <filtersfile file="${resources.dir}/filters/${database}.properties"/>

        <filter token="database" value="${database}"/>
        <filter token="driver.dir" value="${driver.dir}"/>
        <filter token="driver.jar" value="${driver.jar}"/>
        <filter token="driver.class" value="${driver.class}"/>

        <filter token="connection.url" value="${connection.url}"/>
        <filter token="connection.url.other" value="${connection.url.other}"/>

        <filter token="password" value="${password}"/>
        <filter token="username" value="${username}"/>

        <filter token="password.other" value="${password.other}"/>
        <filter token="username.other" value="${username.other}"/>

        <filter token="connection.url" value="${connection.url}"/>
        <filter token="connection.url.other" value="${connection.url.other}"/>
    </filterset>

    <target name="create-distro1" description="Create first distribution of Infinispan server by copying the one from build/target directory or unpacking a distro zip">
        <echo message="Creating test server distro at ${server1.dist}" />
        <if>
            <equals arg1="${zip.dist}" arg2="false" />
            <then>
                <echo message="Using distribution ${server.build.dist}" />
                <copy todir="${server1.dist}">
                    <fileset dir="${server.build.dist}" />
                </copy>
            </then>
            <else>
                <echo message="Using file ${zip.dist}" />
                <unzip src="${zip.dist}" dest="${server1.dist}-tmp" />
                <for param="file">
                    <path>
                        <fileset dir="${server1.dist}-tmp" includes="**/jboss-modules.jar" />
                    </path>
                    <sequential>
                        <propertyregex override="yes" property="dir.in.zip" input="@{file}" regexp=".*[/\\]([^/\\]*)[/\\]jboss-modules\.jar" replace="\1" />
                    </sequential>
                </for>
                <move file="${server1.dist}-tmp/${dir.in.zip}" tofile="${server1.dist}" />
                <delete dir="${server1.dist}-tmp" />
                <if>
                    <equals arg1="${leveldb.patch}" arg2="true" />
                    <then>
                        <property name="leveldb.module1" value="modules/system/layers/base/org/fusesource/leveldbjni-all/main" />
                        <property name="leveldb.module2" value="modules/system/layers/base/org/iq80/leveldb/main" />
                        <copy todir="${server1.dist}/${leveldb.module1}" overwrite="true">
                            <fileset dir="${server.build.dist}/${leveldb.module1}" />
                        </copy>
                        <copy todir="${server1.dist}/${leveldb.module2}" overwrite="true">
                            <fileset dir="${server.build.dist}/${leveldb.module2}" />
                        </copy>
                    </then>
                </if>
            </else>
        </if>

        <if>
            <equals arg1="${database}" arg2="h2"/>
            <then>
                <echo message="JDBC tests will run with H2 datasource"/>
                <property name="datasource.file" value="datasource-h2.xml"/>
            </then>
            <else>
                <echo message="JDBC tests will run with custom datasource"/>
                <property name="datasource.file" value="datasource.xml"/>
                <delete dir="${server1.dist}/modules/system/layers/base/driver"/>
                <copy file="${driver.dir}/${driver.jar}"
                      todir="${server1.dist}/modules/system/layers/base/com/${database}/driver/main" overwrite="true"/>
                <copy file="${resources.dir}/module.xml"
                      todir="${server1.dist}/modules/system/layers/base/com/${database}/driver/main" overwrite="true"
                      filtering="@filtering">
                    <filterset refid="dbFilters"/>
                </copy>
            </else>
        </if>

        <copy todir="${server1.dist}/standalone/configuration/examples">
            <fileset dir="${server1.dist}/docs/examples/configs" />
        </copy>
        <copy todir="${server1.dist}/standalone/configuration" overwrite="true">
            <fileset dir="${resources.dir}">
                <include name="*.jks" />
                <include name="*.properties"/>
                <include name="*.keystore"/>
            	<include name="*.keytab"/>
            	<include name="*.conf"/>
            </fileset>
        </copy>
    </target>

    <target name="create-all-distros" depends="transform-distro1-configs" description="Create all Infinispan server home directories used in the testsuite">	
        <copy todir="${server2.dist}">
            <fileset dir="${server1.dist}" />
        </copy>
        <copy todir="${server3.dist}">
            <fileset dir="${server1.dist}" />
        </copy>

        <echo message="Creating old server distro at ${server.old.dist}" />
        <if>
            <equals arg1="${zip.dist.old}" arg2="false" />
            <then>
                <echo message="Zip for old server distribution was not passed. Skipping." />
            </then>
            <else>
                <echo message="Using file ${zip.dist.old}" />
                <unzip src="${zip.dist.old}" dest="${server.old.dist}-tmp" />
                <for param="file">
                    <path>
                        <fileset dir="${server.old.dist}-tmp" includes="**/jboss-modules.jar" />
                    </path>
                    <sequential>
                        <propertyregex override="yes" property="dir.in.zip" input="@{file}" regexp=".*[/\\]([^/\\]*)[/\\]jboss-modules\.jar" replace="\1" />
                    </sequential>
                </for>
                <move file="${server.old.dist}-tmp/${dir.in.zip}" tofile="${server.old.dist}" />
                <delete dir="${server.old.dist}-tmp" />
                <transform transformDir="${server.old.dist}/standalone/configuration" in="standalone.xml" out="standalone.xml"
                           removeRestSecurity="true"/>

                <copy todir="${server2.old.dist}">
                    <fileset dir="${server.old.dist}" />
                </copy>
                <copy todir="${server3.old.dist}">
                    <fileset dir="${server.old.dist}" />
                </copy>
            </else>
        </if>
    </target>

    <target name="transform-distro1-configs" depends="create-distro1">
        <!-- copy second node configs -->
        <copy file="${server1.configs}/examples/clustered-two-nodes.xml" tofile="${server1.configs}/examples/clustered-two-nodes2.xml"/>
        <!-- transform -->
        <transform in="examples/clustered-xsite.xml" out="examples/clustered-xsite2.xml" modifyInfinispan="${infinispan.parts}/xsite-server2.xml"/>
        <transform in="examples/clustered-xsite.xml" out="examples/clustered-xsite3.xml"
                   modifyInfinispan="${infinispan.parts}/xsite-server3.xml" modifyRelay="${other.parts}/xsite-relay-server3.xml"
                   modifyMulticastAddress="${other.parts}/switch-multicast-address.xml"/>
        <transform in="examples/standalone-rcs-local.xml" out="examples/standalone-rcs-local.xml" modifyRemoteDestination="${other.parts}/rcs-remote-destination.xml"/>
        <transform in="examples/standalone-hotrod-rolling-upgrade.xml" out="examples/standalone-hotrod-rolling-upgrade.xml"
                   modifyRemoteDestination="${other.parts}/rcs-remote-destination.xml"/>
        <transform in="clustered.xml" out="examples/clustered-hotrod-rolling-upgrade.xml"
                   modifyRemoteDestination="${other.parts}/rcs-remote-destination.xml"
                   modifyInfinispan="${infinispan.parts}/rolling-upgrades-clustered-${new.server.schema.version}.xml"
                   infinispanServerEndpoint="${other.parts}/rolling-upgrades-server-endpoint-${new.server.schema.version}.xml"
                   addNewHotrodSocketBinding="${other.parts}/socket-binding-hotrod-store.xml"
                   modifyMulticastAddress="${other.parts}/switch-multicast-address.xml"/>
        <transform in="examples/standalone-rest-rolling-upgrade.xml" out="examples/standalone-rest-rolling-upgrade.xml"
                   modifyRemoteDestination="${other.parts}/rest-remote-destination.xml" removeRestSecurity="true"/>
        <transform in="examples/standalone-compatibility-mode.xml" out="examples/standalone-compatibility-mode.xml"/>
        <transform in="examples/clustered-two-nodes.xml" out="examples/clustered-two-nodes.xml"/>
        <transform in="examples/clustered-two-nodes2.xml" out="examples/clustered-two-nodes2.xml"/>
        <transform in="clustered.xml" out="testsuite/clustered-jmx.xml" modifyInfinispan="${infinispan.parts}/jmx.xml"/>
        <transform in="standalone.xml" out="testsuite/standalone-default-local.xml" modifyInfinispan="${infinispan.parts}/default-local.xml"/>
        <transform in="clustered.xml" out="testsuite/clustered-default-dist.xml" modifyInfinispan="${infinispan.parts}/default-dist.xml"/>
        <transform in="clustered.xml" out="testsuite/clustered-default-repl.xml" modifyInfinispan="${infinispan.parts}/default-repl.xml"/>
        <transform in="standalone.xml" out="testsuite/standalone-with-indexing.xml" modifyInfinispan="${infinispan.parts}/indexing.xml"/>
        <transform in="clustered.xml" out="testsuite/distributed-with-indexing.xml" modifyInfinispan="${infinispan.parts}/indexing-distributed.xml" filtering="true"/>
        <transform in="clustered.xml" out="testsuite/clustered-with-indexing.xml" modifyInfinispan="${infinispan.parts}/indexing-clustered.xml" filtering="true"/>
        <transform in="standalone.xml" out="testsuite/standalone-leveldb-local.xml" modifyInfinispan="${infinispan.parts}/leveldb-local.xml" filtering="true"/>
        <transform in="clustered.xml" out="testsuite/clustered-leveldb-dist.xml" modifyInfinispan="${infinispan.parts}/leveldb-dist.xml" filtering="true"/>
        <transform in="clustered.xml" out="testsuite/clustered-leveldb-repl.xml" modifyInfinispan="${infinispan.parts}/leveldb-repl.xml" filtering="true"/>
        <transform in="clustered.xml" out="testsuite/clustered-asymmetric-1.xml" modifyInfinispan="${infinispan.parts}/asymmetric-1.xml"/>
        <transform in="clustered.xml" out="testsuite/clustered-asymmetric-2.xml" modifyInfinispan="${infinispan.parts}/asymmetric-2.xml"/>
        <transform in="examples/standalone-rcs-local.xml" out="testsuite/standalone-rcs-local.xml"
                   modifyInfinispan="${infinispan.parts}/rcs-local.xml"
                   modifyRemoteDestination="${other.parts}/rcs-remote-destination.xml"
                   filtering="true"/>
        <transform in="standalone.xml" out="testsuite/standalone-rcs-remote.xml"
                   modifyInfinispan="${infinispan.parts}/rcs-remote.xml"
                   filtering="true"/>
        <transform in="clustered.xml" out="testsuite/clustered-suppress-state-transfer.xml"
                   modifyInfinispan="${infinispan.parts}/suppress-state-transfer.xml"
                   infinispanServerEndpoint="${other.parts}/suppress-server-endpoint.xml"
                   filtering="true"/>
        <transform in="clustered.xml" out="testsuite/clustered-transport-stack.xml" modifyStack="${other.parts}/jgroups-stack.xml"/>
        <transform in="clustered.xml" out="testsuite/clustered-with-l1.xml" modifyInfinispan="${infinispan.parts}/l1.xml"/>
        <transform in="standalone.xml" out="testsuite/rest-sec-basic-wr.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
            <rest-sec>
                <transform-rest-sec securityMode="WRITE" cacheContainer="security" in="@{in}" />
            </rest-sec>
        </transform>
        <transform in="standalone.xml" out="testsuite/rest-sec-basic-rw.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
            <rest-sec>
                <transform-rest-sec securityMode="READ_WRITE" cacheContainer="security" in="@{in}"/>
            </rest-sec>
        </transform>
        <transform in="standalone.xml" out="testsuite/rest-sec-cert-wr.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
            <rest-sec>
                <transform-rest-sec securityMode="WRITE" authMethod="CLIENT-CERT" cacheContainer="security" securityDomain="client_cert_auth" modifyCertSecDomain="true" in="@{in}"/>
            </rest-sec>
        </transform>
        <transform in="standalone.xml" out="testsuite/rest-sec-cert-rw.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
            <rest-sec>
                <transform-rest-sec securityMode="READ_WRITE" authMethod="CLIENT-CERT" cacheContainer="security" securityDomain="client_cert_auth" modifyCertSecDomain="true" in="@{in}"/>
            </rest-sec>
        </transform>

        <transform in="standalone.xml" out="testsuite/rest-sec-digest-wr.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
            <rest-sec>
                <transform-rest-sec securityMode="WRITE" authMethod="DIGEST" cacheContainer="security" securityDomain="digest_auth" modifyDigestSecDomain="true" in="@{in}"/>
            </rest-sec>
        </transform>
        <transform in="standalone.xml" out="testsuite/rest-sec-digest-rw.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
            <rest-sec>
                <transform-rest-sec securityMode="READ_WRITE" authMethod="DIGEST" cacheContainer="security" securityDomain="digest_auth" modifyDigestSecDomain="true" in="@{in}"/>
            </rest-sec>
        </transform>
        <transform in="clustered.xml" out="testsuite/clustered-with-encrypt.xml" modifyInfinispan="${infinispan.parts}/default-repl.xml" addEncrypt="${other.parts}/jgroups-encrypt.xml" filtering="true"/>
        <transform in="standalone.xml" out="testsuite/standalone-filecs.xml" modifyInfinispan="${infinispan.parts}/filecachestore.xml"/>
        <transform in="standalone.xml" out="testsuite/standalone-eviction.xml" modifyInfinispan="${infinispan.parts}/eviction.xml"/>
        <transform in="standalone.xml" out="testsuite/standalone-customcs.xml" modifyInfinispan="${infinispan.parts}/customcs.xml" filtering="true"/>
        <transform in="clustered.xml" out="testsuite/clustered-expiration.xml" modifyInfinispan="${infinispan.parts}/expiration.xml"/>
        <transform in="standalone.xml" out="testsuite/standalone-cachecontainer.xml"
                   modifyInfinispan="${infinispan.parts}/cachecontainer.xml"
                   modifyThreads="${other.parts}/cachecontainer-thread-pools.xml"
                   infinispanServerEndpoint="${other.parts}/cachecontainer-endpoints.xml"
                   addHotrodSocketBinding="${other.parts}/cachecontainer-hotrod-binding.xml"/>
        <transform in="clustered.xml" out="testsuite/clustered-clusteredcache.xml" modifyInfinispan="${infinispan.parts}/clusteredcache.xml" />
        <transform in="standalone.xml" out="testsuite/jdbc-binary-no-passivation.xml" modifyInfinispan="${infinispan.parts}/jdbc-binary-no-passivation.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="BINARY_NO_PASSIVATION"/>
            </jdbc-conf>
        </transform>
        <transform in="standalone.xml" out="testsuite/jdbc-binary-with-passivation.xml" modifyInfinispan="${infinispan.parts}/jdbc-binary-with-passivation.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="BINARY_WITH_PASSIVATION"/>
            </jdbc-conf>
        </transform>
        <transform in="standalone.xml" out="testsuite/jdbc-mixed-no-passivation.xml" modifyInfinispan="${infinispan.parts}/jdbc-mixed-no-passivation.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="MIXED_NO_PASSIVATION"/>
            </jdbc-conf>
        </transform>
        <transform in="standalone.xml" out="testsuite/jdbc-mixed-with-passivation.xml" modifyInfinispan="${infinispan.parts}/jdbc-mixed-with-passivation.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="MIXED_WITH_PASSIVATION"/>
            </jdbc-conf>
        </transform>
        <transform in="standalone.xml" out="testsuite/jdbc-string-no-passivation.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-no-passivation.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_NO_PASSIVATION"/>
            </jdbc-conf>
        </transform>
        <transform in="standalone.xml" out="testsuite/jdbc-string-with-passivation.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-with-passivation.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_WITH_PASSIVATION"/>
            </jdbc-conf>
        </transform>
        <transform in="standalone.xml" out="testsuite/jdbc-string-async.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-async.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_ASYNC"/>
            </jdbc-conf>
        </transform>
        <transform in="clustered.xml" out="testsuite/jdbc-string-multinode-fetch-state1.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-multinode-fetch-state.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_MULTINODEx"/>
            </jdbc-conf>
        </transform>
        <transform in="clustered.xml" out="testsuite/jdbc-string-multinode-fetch-state2.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-multinode-fetch-state.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_MULTINODEy" jndiName="java:jboss/datasources/JdbcDSOther"/>
            </jdbc-conf>
        </transform>
        <transform in="clustered.xml" out="testsuite/jdbc-string-multinode-singleton1.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-multinode-singleton.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_MULTINODEx"/>
            </jdbc-conf>
        </transform>
        <transform in="clustered.xml" out="testsuite/jdbc-string-multinode-singleton2.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-multinode-singleton.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_MULTINODEy" jndiName="java:jboss/datasources/JdbcDSOther"/>
            </jdbc-conf>
        </transform>
        <transform in="clustered.xml" out="testsuite/jdbc-string-invalidation.xml" modifyInfinispan="${infinispan.parts}/jdbc-string-invalidation.xml" modifyDataSource="${datasource.parts}/${datasource.file}" filtering="true">
            <jdbc-conf>
                <configure-jdbc in="@{in}" tablePrefix="STRING_INVALIDATION"/>
            </jdbc-conf>
        </transform>
    	<transform in="standalone.xml" out="testsuite/hotrod-auth.xml" 
    	    modifyInfinispan="${infinispan.parts}/local-secured.xml"    
    	    hotrodAuth="${infinispan.parts}/hotrod-auth.xml" />
    	<transform in="standalone.xml" out="testsuite/hotrod-auth-krb.xml" 
    	    modifyInfinispan="${infinispan.parts}/local-secured.xml"
            hotrodAuth="${infinispan.parts}/hotrod-auth-krb.xml" 
    	    addKrbOpts="${other.parts}/kerberos-properties.xml"
    	    addKrbSecDomain="${other.parts}/kerberos-security-domain.xml" />
    </target>

    <macrodef name="transform">
        <attribute name="templateFile" default="${default.transform}"/>
        <attribute name="transformDir" default="${server1.configs}"/>
        <attribute name="in"/>
        <attribute name="out"/>
        <attribute name="modifyInfinispan" default="false"/>
        <attribute name="modifyThreads" default="false"/>
        <attribute name="modifyDataSource" default="false"/>
        <attribute name="modifyStack" default="false"/>
        <attribute name="modifyRelay" default="false"/>
        <attribute name="modifyMulticastAddress" default="false"/>
        <attribute name="modifyRemoteDestination" default="false"/>
        <attribute name="modifyOutboundSocketBindingHotRod" default="false"/>
        <attribute name="addHotrodSocketBinding" default="false"/>
        <attribute name="addNewHotrodSocketBinding" default="false"/>
        <attribute name="removeRestSecurity" default="true"/>
        <attribute name="infinispanServerEndpoint" default="false"/>
        <attribute name="infinispanFile" default="false"/>
        <attribute name="filtering" default="false"/>
        <attribute name="addEncrypt" default="false"/>
        <attribute name="hotrodAuth" default="false"/>
    	<attribute name="addKrbOpts" default="false"/>
    	<attribute name="addKrbSecDomain" default="false"/>
        <element name="jdbc-conf" optional="yes"/>
        <element name="rest-sec" optional="yes"/>

        <sequential>
            <xslt in="@{transformDir}/@{in}" out="@{transformDir}/@{in}-transformed" style="@{templateFile}">
                <param name="modifyInfinispan" expression="@{modifyInfinispan}"/>
                <param name="modifyThreads" expression="@{modifyThreads}"/>
                <param name="modifyDataSource" expression="@{modifyDataSource}"/>
                <param name="modifyStack" expression="@{modifyStack}"/>
                <param name="modifyRelay" expression="@{modifyRelay}"/>
                <param name="addEncrypt" expression="@{addEncrypt}"/>
                <param name="hotrodAuth" expression="@{hotrodAuth}"/>
            	<param name="addKrbOpts" expression="@{addKrbOpts}"/>
            	<param name="addKrbSecDomain" expression="@{addKrbSecDomain}"/>
                <param name="modifyMulticastAddress" expression="@{modifyMulticastAddress}"/>
                <param name="modifyRemoteDestination" expression="@{modifyRemoteDestination}"/>
                <param name="modifyOutboundSocketBindingHotRod" expression="@{modifyOutboundSocketBindingHotRod}"/>
                <param name="addHotrodSocketBinding" expression="@{addHotrodSocketBinding}"/>
                <param name="addNewHotrodSocketBinding" expression="@{addNewHotrodSocketBinding}"/>
                <param name="removeRestSecurity" expression="@{removeRestSecurity}"/>
                <param name="infinispanServerEndpoint" expression="@{infinispanServerEndpoint}"/>
                <param name="infinispanFile" expression="@{infinispanFile}"/>
                <param name="log.level.infinispan" expression="${log.level.infinispan}"/>
                <param name="log.level.jgroups" expression="${log.level.jgroups}"/>
                <param name="log.level.console" expression="${log.level.console}"/>
            </xslt>

            <jdbc-conf/>
            <rest-sec/>

            <move file="@{transformDir}/@{in}-transformed" tofile="@{transformDir}/@{out}" filtering="@filtering">
                <filterset refid="commonFilters"/>
            </move>
        </sequential>
    </macrodef>

    <macrodef name="transform-rest-sec" description="make xslt transformation of rest security">
        <attribute name="transformDir" default="${server1.configs}"/>
        <attribute name="in" />
        <attribute name="restTemplateFile" default="${default.transform.rest}" />
        <attribute name="securityDomain" default="other"/>
        <attribute name="securityMode" default="WRITE"/>
        <attribute name="authMethod" default="BASIC" />
        <attribute name="cacheContainer" default="local"/>
        <attribute name="modifyCertSecDomain" default="false" />
        <attribute name="modifyDigestSecDomain" default="false" />

        <sequential>
            <xslt in="@{transformDir}/@{in}-transformed" out="@{transformDir}/@{in}-transformed-rest"
                  style="@{restTemplateFile}">
                <param name="security.domain" expression="@{securityDomain}" />
                <param name="security.mode" expression="@{securityMode}"/>
                <param name="cache.container" expression="@{cacheContainer}"/>
                <param name="auth.method" expression="@{authMethod}"/>
                <param name="modifyCertSecDomain" expression="@{modifyCertSecDomain}"/>
                <param name="modifyDigestSecDomain" expression="@{modifyDigestSecDomain}"/>

            </xslt>
            <move file="@{transformDir}/@{in}-transformed-rest" tofile="@{transformDir}/@{in}-transformed"
                  filtering="@filtering">
                <filterset refid="commonFilters"/>
            </move>
        </sequential>
    </macrodef>

    <macrodef name="configure-jdbc" description="configure jdbc cachestore">
        <attribute name="transformDir" default="${server1.configs}"/>
        <attribute name="jndiName" default="java:jboss/datasources/JdbcDS"/>
        <attribute name="tablePrefix" default="ISPN"/>
        <attribute name="serverDir" default="${server1.dist}"/>
        <attribute name="in"/>

        <sequential>
            <filterset id="nameFilters" begintoken="${" endtoken="}">
                <filter token="jndi.name" value="@{jndiName}"/>
                <filter token="table.prefix" value="@{tablePrefix}"/>
            </filterset>

            <move file="@{transformDir}/@{in}-transformed" tofile="@{transformDir}/@{in}-transformed-jdbc"
                  filtering="@filtering">
                <filterset refid="nameFilters"/>
                <filterset refid="dbFilters"/>
            </move>
            <move file="@{transformDir}/@{in}-transformed-jdbc" tofile="@{transformDir}/@{in}-transformed"/>
        </sequential>
    </macrodef>
</project>
