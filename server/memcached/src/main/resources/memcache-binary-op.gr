// Memcached binary protocol
namespace mc;

// Target class
class org.infinispan.server.memcached.binary.BinaryOpDecoderImpl extends BinaryOpDecoder;

// static final field values are literals
constants org.infinispan.server.memcached.binary.BinaryConstants;

// methods vInt, vLong, array, byte...
intrinsics org.infinispan.server.memcached.binary.BinaryIntrinsics;

import java.time.Instant;
import java.time.temporal.Temporal;
import javax.security.auth.Subject;
import org.infinispan.server.memcached.MemcachedServer;

init {
   private boolean deadEnd = false;

   public BinaryOpDecoderImpl(MemcachedServer server, Subject subject) {
      super(server, subject);
   }

   public BinaryOpDecoderImpl(MemcachedServer server) {
      this(server, ANONYMOUS);
   }
}

exceptionally {
   log.trace("Parsing error", t);
   state = 0;
   exceptionCaught(header, t);
}

deadend {
   if (!deadEnd) {
      log.tracef("Invalid state of parsing");
      exceptionCaught(header, new IllegalStateException("Dead end processing request"));
      deadEnd = true;
   }
   state = 0;
}

beforedecode {
   // We cannot read more than one command at a time
   if (!ctx.channel().config().isAutoRead()) {
      log.tracef("Auto read was disabled, not reading next bytes yet");
      return;
   } else {
      log.tracef("Auto read was enabled, reading next bytes");
   }
}

// this is the root
root request
   : magic { if (accessLogging) requestStart = Instant.now(); }
     header { if (log.isTraceEnabled()) log.tracef("Parsed header: %s", header); }
     parameters
   ;

header returns BinaryHeader
   : { magic != MAGIC_REQ }? { throw new IllegalStateException("Error reading magic byte or message id: " + magic); }
   | { deadEnd = false } op keyLength extrasLength dataType vbucketId totalBodyLength opaque cas valueLength
     { acquireHeader().replace(requestStart, requestBytes, principalName, key, opCode, opaque, cas) }
   ;

magic: byte;
op: opCode;
keyLength: short;
extrasLength: byte;
dataType: byte;
vbucketId: short;
totalBodyLength: int;
opaque: int;
cas: long;
delta: long;
initial: long;
verbosity: int;

// extras
flags: int;
expiration returns int
   : { extrasLength > 0 }? int
   | { 0 }
   ;

valueLength returns int
   : { totalBodyLength - keyLength - extrasLength };

key returns byte[]
   :  { keyLength > 0 }? fixedArray[keyLength]
   |  { org.infinispan.commons.util.Util.EMPTY_BYTE_ARRAY }
   ;

value returns byte[]
   : { valueLength > 0 }? fixedArray[valueLength]
   |  { org.infinispan.commons.util.Util.EMPTY_BYTE_ARRAY }
   ;

parameters switch op
// Operations
   : { GET }? key { if (out.add(get(header, key, false))) { state=0; return false; } }
   | { GETQ }? key { if (out.add(get(header, key, true))) { state=0; return false; } }
   | { GETK }? key { if (out.add(get(header, key, false))) { state=0; return false; } }
   | { GETKQ }? key { if (out.add(get(header, key, true))) { state=0; return false; } }
   | { SET }? flags expiration key value { if (out.add(set(header, key, value, flags, expiration, false))) { state=0; return false; } }
   | { SETQ }? flags expiration key value { if (out.add(set(header, key, value, flags, expiration, true))) { state=0; return false; } }
   | { ADD }? flags expiration key value { if (out.add(add(header, key, value, flags, expiration, false))) { state=0; return false; } }
   | { ADDQ }? flags expiration key value { if (out.add(add(header, key, value, flags, expiration, true))) { state=0; return false; } }
   | { REPLACE }? flags expiration key value { if (out.add(replace(header, key, value, flags, expiration, false))) { state=0; return false; } }
   | { REPLACEQ }? flags expiration key value { if (out.add(replace(header, key, value, flags, expiration, true))) { state=0; return false; } }
   | { DELETE }? key { if (out.add(delete(header, key, false))) { state=0; return false; } }
   | { DELETEQ }? key { if (out.add(delete(header, key, true))) { state=0; return false; } }
   | { INCREMENT }? delta initial expiration key { if (out.add(increment(header, key, delta, initial, expiration, false))) { state=0; return false; } }
   | { INCREMENTQ }? delta initial expiration key { if (out.add(increment(header, key, delta, initial, expiration, true))) { state=0; return false; } }
   | { DECREMENT }? delta initial expiration key { if (out.add(increment(header, key, -delta, initial, expiration, false))) { state=0; return false; } }
   | { DECREMENTQ }? delta initial expiration key { if (out.add(increment(header, key, -delta, initial, expiration, true))) { state=0; return false; } }
   | { QUIT }? { if (out.add(quit(header, false))) { state=0; return false; } }
   | { QUITQ }? { quit(header, true) }
   | { FLUSH }? expiration { if (out.add(flush(header, expiration, false))) { state=0; return false; } }
   | { FLUSHQ }? expiration { flush(header, expiration, true) }
   | { NO_OP }? { if (out.add(noop(header))) { state=0; return false; } }
   | { VERSION }? { if (out.add(version(header))) { state=0; return false; } }
   | { APPEND }? key value { if (out.add(append(header, key, value, false))) { state=0; return false; } }
   | { APPENDQ }? key value { if (out.add(append(header, key, value, true))) { state=0; return false; } }
   | { PREPEND }? key value { if (out.add(prepend(header, key, value, false))) { state=0; return false; } }
   | { PREPENDQ }? key value { if (out.add(prepend(header, key, value, true))) { state=0; return false; } }
   | { VERBOSITY }? verbosity { if (out.add(verbosityLevel(header, verbosity))) { state=0; return false; } }
   | { TOUCH }? expiration key { if (out.add(touch(header, key, expiration))) { state=0; return false; } }
   | { GAT }? expiration key { if (out.add(gat(header, key, expiration, false))) { state=0; return false; } }
   | { GATQ }? expiration key { if (out.add(gat(header, key, expiration, true))) { state=0; return false; } }
   | { GATK }? expiration key { if (out.add(gat(header, key, expiration, false))) { state=0; return false; } }
   | { GATKQ }? expiration key { if (out.add(gat(header, key, expiration, true))) { state=0; return false; } }
   | { STAT }? key { if (out.add(stat(header, key))) { state=0; return false; } }
   | { CONFIG_GET }? key { if (out.add(config(header, key))) { state=0; return false; } }
// Unknown
   | { throw new IllegalArgumentException("Unknown operation " + op); }
   ;
