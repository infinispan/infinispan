// Memcached text protocol
namespace mc;

// Target class
class org.infinispan.server.memcached.text.TextAuthDecoderImpl extends TextAuthDecoder;

// static final field values are literals
constants org.infinispan.server.memcached.text.TextConstants;

// methods vInt, vLong, array, byte...
intrinsics org.infinispan.server.memcached.text.TextIntrinsics;

import io.netty.handler.codec.TooLongFrameException;
import java.time.Instant;
import java.time.temporal.Temporal;
import org.infinispan.server.memcached.MemcachedServer;

init {
   private boolean deadEnd = false;

   public TextAuthDecoderImpl(MemcachedServer server) {
      super(server);
   }

   private TextHeader getHeader() {
      return accessLogging ? new TextHeader(requestBytes, requestStart, principalName, null, null, "auth") : null;
   }
}

beforedecode {
   // We cannot read more than one command at a time
   if (!ctx.channel().config().isAutoRead()) {
      log.tracef("Auto read was disabled, not reading next bytes yet");
      return;
   } else {
      log.tracef("Auto read was enabled, reading next bytes");
   }
}

exceptionally {
   state = 0;
   if (t instanceof TooLongFrameException tlfe) {
      log.requestTooLarge(ctx.channel(), tlfe);
      ctx.close();
      return;
   }
   log.trace("Parsing error", t);
}

deadend {
   if (!deadEnd) {
      log.tracef("Invalid state of parsing");
      deadEnd = true;
   }
   state = 0;
}

root request
   : { posBefore = buf.readerIndex(); }
     command_name { requestStart = Instant.now(); } parameters
   ;

key: text_key[reader, bytesAvailable(buf, requestBytes)];
command_name: command[reader, bytesAvailable(buf, requestBytes)];
exptime: long_number[reader, bytesAvailable(buf, requestBytes)];
flags: int_number[reader, bytesAvailable(buf, requestBytes)];
vsize: int_number[reader, bytesAvailable(buf, requestBytes)];
value returns byte[]
   : { vsize > 0 }? fixedArray[vsize, bytesAvailable(buf, requestBytes)]
   | { org.infinispan.commons.util.Util.EMPTY_BYTE_ARRAY }
   ;
eol: short;

parameters switch command_name
// Operations
   : { set }? key flags exptime vsize eol value eol { if (out.add(auth(getHeader(), value))) { state = 0; return false; } }
// Unknown
   | { throw new IllegalArgumentException("Unknown command " + command_name); }
   ;
