<?xml version='1.0' encoding='UTF-8'?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <modelVersion>4.0.0</modelVersion>
   <parent>
      <groupId>org.infinispan</groupId>
      <artifactId>infinispan-server-parent</artifactId>
      <version>10.1.4-SNAPSHOT</version>
      <relativePath>../pom.xml</relativePath>
   </parent>

   <artifactId>infinispan-server-runtime</artifactId>
   <packaging>jar</packaging>
   <name>Infinispan Server</name>
   <description>Infinispan Server</description>

   <properties>
      <module.skipMavenRemoteResource>true</module.skipMavenRemoteResource>
      <defaultTestGroup/>
      <defaultExcludedTestGroup/>
      <server.output.dir>${project.build.directory}/${infinispan.brand.prefix}-server-${infinispan.brand.version}</server.output.dir>
      <server.test.lib.dir>${project.build.directory}/testlibs</server.test.lib.dir>
   </properties>

   <dependencies>
      <!-- Build dependencies. -->
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-component-processor</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan.protostream</groupId>
         <artifactId>protostream-processor</artifactId>
      </dependency>
      <!-- Compile dependencies. All of these will be shipped in the server -->
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-server-hotrod</artifactId>
         <type>jar</type>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-server-rest</artifactId>
         <type>jar</type>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-server-memcached</artifactId>
         <type>jar</type>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-server-router</artifactId>
         <type>jar</type>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-remote-query-server</artifactId>
         <type>jar</type>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-client-hotrod</artifactId>
         <exclusions>
            <exclusion>
               <groupId>org.wildfly.security</groupId>
               <artifactId>*</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-client-rest</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-cachestore-jdbc</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-cachestore-rocksdb</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-cachestore-remote</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-persistence-soft-index</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-cli-client</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-scripting</artifactId>
      </dependency>
      <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-jboss-marshalling</artifactId>
      </dependency>
      <dependency>
         <groupId>org.wildfly.security</groupId>
         <artifactId>wildfly-elytron</artifactId>
         <exclusions>
            <exclusion>
               <groupId>org.wildfly.security</groupId>
               <artifactId>*</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <groupId>org.jboss.threads</groupId>
         <artifactId>jboss-threads</artifactId>
      </dependency>
      <dependency>
         <groupId>io.agroal</groupId>
         <artifactId>agroal-pool</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-api</artifactId>
         <scope>compile</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-core</artifactId>
         <scope>compile</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-slf4j-impl</artifactId>
         <scope>compile</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-jul</artifactId>
         <scope>compile</scope>
      </dependency>
      <dependency>
         <groupId>org.glassfish</groupId>
         <artifactId>javax.json</artifactId>
      </dependency>
      <dependency>
         <groupId>org.kohsuke.metainf-services</groupId>
         <artifactId>metainf-services</artifactId>
      </dependency>
      <dependency>
         <groupId>org.wildfly.openssl</groupId>
         <artifactId>wildfly-openssl-java</artifactId>
      </dependency>
      <dependency>
         <groupId>org.wildfly.openssl</groupId>
         <artifactId>wildfly-openssl-linux-x86_64</artifactId>
         <scope>compile</scope>
      </dependency>

      <!-- Test dependencies -->
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <build>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
               <execution>
                  <id>console</id>
                  <phase>package</phase>
                  <goals>
                     <goal>unpack</goal>
                  </goals>
                  <configuration>
                     <artifactItems>
                        <artifactItem>
                           <groupId>org.infinispan</groupId>
                           <artifactId>infinispan-console</artifactId>
                           <outputDirectory>${server.output.dir}/static/console</outputDirectory>
                        </artifactItem>
                     </artifactItems>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
               <parallel>classes</parallel>
               <groups combine.self="override"/>
               <excludedGroups combine.self="override">${defaultExcludedJUnitGroups}</excludedGroups>
               <testNGArtifactName>none:none</testNGArtifactName>
               <disableXmlReport>false</disableXmlReport>
               <properties combine.self="override">
                  <usedefaultlisteners>false</usedefaultlisteners>
                  <listener>${junitListener}</listener>
                  <log4j.configurationFile>${log4j.configurationFile}</log4j.configurationFile>
               </properties>
               <systemPropertyVariables>
                  <server.output.dir>${server.output.dir}</server.output.dir>
               </systemPropertyVariables>
            </configuration>
         </plugin>
         <plugin>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
               <execution>
                  <id>default-jar</id>
                  <configuration>
                     <excludes>
                        <exclude>org/infinispan/server/loader/**</exclude>
                     </excludes>
                  </configuration>
               </execution>
               <execution>
                  <id>loader</id>
                  <phase>package</phase>
                  <goals>
                     <goal>jar</goal>
                  </goals>
                  <configuration>
                     <classifier>loader</classifier>
                     <includes>
                        <include>org/infinispan/server/loader/*</include>
                     </includes>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.infinispan.maven-plugins</groupId>
            <artifactId>proto-schema-compatibility</artifactId>
            <executions>
               <execution>
                  <goals>
                     <goal>proto-schema-compatibility-check</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
               <execution>
                  <id>clean-server</id>
                  <phase>clean</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <property name="output.dir"
                                  value="${server.output.dir}"/>
                        <ant antfile="build.xml" inheritRefs="true">
                           <target name="clean"/>
                        </ant>
                     </target>
                  </configuration>
               </execution>
               <execution>
                  <id>build-server</id>
                  <phase>package</phase>
                  <goals>
                     <goal>run</goal>
                  </goals>
                  <configuration>
                     <target>
                        <property name="compile_classpath" refid="maven.compile.classpath"/>
                        <property name="output.dir"
                                  value="${server.output.dir}"/>
                        <property name="server.dir"
                                  value="${project.basedir}/src/main/server"/>
                        <property name="test.lib.dir"
                                  value="${server.test.lib.dir}"/>
                        <property name="dollar" value="$"/>

                        <filterset id="brandfilter" begintoken="${dollar}{" endtoken="}">
                           <filter token="infinispan.brand.name" value="${infinispan.brand.name}"/>
                           <filter token="infinispan.brand.version" value="${infinispan.brand.version}"/>
                           <filter token="infinispan.brand.short-name" value="${infinispan.brand.short-name}"/>
                           <filter token="current.year" value="${current.year}"/>
                        </filterset>

                        <dependencyfilesets scopes="compile"/>
                        <dependencyfilesets scopes="test" projectDependenciesId="maven.test.dependencies"/>
                        <ant antfile="build.xml" inheritRefs="true">
                           <target name="build"/>
                        </ant>
                     </target>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.wildfly.maven.plugins</groupId>
            <artifactId>licenses-plugin</artifactId>
            <executions>
               <execution>
                  <id>update-licenses-xml</id>
                  <goals>
                     <goal>insert-versions</goal>
                  </goals>
                  <phase>package</phase>
                  <configuration>
                     <sortByGroupIdAndArtifactId>true</sortByGroupIdAndArtifactId>
                     <licensesOutputFile>${server.output.dir}/docs/licenses/licenses.xml</licensesOutputFile>
                     <excludedArtifacts>.*jcip.*</excludedArtifacts>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>xml-maven-plugin</artifactId>
            <version>1.0.1</version>
            <inherited>false</inherited>
            <executions>
               <execution>
                  <id>generate-licenses-html</id>
                  <goals>
                     <goal>transform</goal>
                  </goals>
                  <phase>package</phase>
                  <configuration>
                     <transformationSets>
                        <transformationSet>
                           <dir>${server.output.dir}/docs/licenses</dir>
                           <includes>
                              <include>licenses.xml</include>
                           </includes>
                           <stylesheet>${server.output.dir}/docs/licenses/licenses.xsl</stylesheet>
                           <outputDir>${server.output.dir}/docs/licenses</outputDir>
                           <fileMappers>
                              <fileMapper
                                      implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
                                 <targetExtension>.html</targetExtension>
                              </fileMapper>
                           </fileMappers>
                           <parameters>
                              <parameter>
                                 <name>product</name>
                                 <value>${project.name}</value>
                              </parameter>
                              <parameter>
                                 <name>version</name>
                                 <value>${project.version}</value>
                              </parameter>
                           </parameters>
                        </transformationSet>
                     </transformationSets>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>
</project>

