infinispan:
  cacheContainer: {}
  server:
    interfaces:
    - name: default
      loopback: null
    - name: another
      loopback: null
    socketBindings:
      portOffset: '0'
      defaultInterface: default
      socketBinding:
      - name: default
        port: '11222'
        interface: default
      - name: hotrod
        port: '11223'
        interface: default
      - name: memcached
        port: '11221'
        interface: default
      - name: memcached-2
        port: '12221'
        interface: default
      - name: rest
        port: '8080'
        interface: default
    security:
      credentialStores:
        - name: credentials
          path: ServerConfigurationParserTest-credentials.pfx
          clearTextCredential:
            clearText: secret
        - name: masked
          path: ServerConfigurationParserTest-credentials.pfx
          maskedCredential:
            masked: "1Hc4Feq2wJs;pepper99;100"
        - name: command
          path: ServerConfigurationParserTest-credentials.pfx
          commandCredential:
            command: "${build.directory}/test-classes/bin/credential.sh"
      securityRealms:
        - name: default
          serverIdentities:
            ssl:
              keystore:
                alias: server
                generateSelfSignedCertificateHost: localhost
                keyPassword: password
                password: password
                path: ServerConfigurationParserTest-keystore.pfx
              truststore:
                password: secret
                path: ServerConfigurationParserTest-truststore.pfx
              engine:
                enabledProtocols:
                  - TLSV1.1
                  - TLSV1.2
                  - TLSV1.3
                enabledCiphersuites: 'DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256'
                enabledCiphersuitesTls13: "TLS_AES_256_GCM_SHA384"
            kerberos:
              principal: kerberos@DOMAIN.ORG
              keytabPath: keytab
              relativeTo: infinispan.server.config.path
              debug: false
              failCache: '1000'
              required: false
          ldapRealm:
            credential: strongPassword
            name: ldap
            principal: 'uid=admin,ou=People,dc=infinispan,dc=org'
            url: 'ldap://${org.infinispan.test.host.address}:10389'
            nameRewriter:
              regexPrincipalTransformer:
                pattern: (.*)@INFINISPAN\.ORG
                replacement: $1
            identityMapping:
              rdnIdentifier: uid
              searchDn: 'ou=People,dc=infinispan,dc=org'
              attributeMapping:
                - filter: '(&(objectClass=groupOfNames)(member={1}))'
                  filterDn: 'ou=Roles,dc=infinispan,dc=org'
                  from: cn
                  to: Roles
                - filter: '(&(objectClass=GroupOfUniqueNames)(member={0}))'
                  filterDn: 'ou=People,dc=infinispan,dc=org'
                  from: cn2
                  to: Roles2
                - to: Roles3
                  reference: memberOf
              userPasswordMapper:
                from: userPassword
                verifiable: false
          localRealm:
            name: test-local
          propertiesRealm:
            groupsAttribute: Roles
            userProperties:
              digestRealmName: digest
              path: ServerConfigurationParserTest-user.properties
              plainText: true
            groupProperties:
              path: ServerConfigurationParserTest-group.properties
          tokenRealm:
            name: token-test
            authServerUrl: 'http://${org.infinispan.test.host.address}:14567/auth/'
            clientId: infinispanConsole
            principalClaim: usernameClaim
            oauth2Introspection:
              clientId: infinispanServer
              clientSecret: '***'
              introspectionUrl: http://${org.infinispan.test.host.address}:14567/auth/realms/infinispan/protocol/openidConnect/token/introspect
              hostNameVerificationPolicy: ANY
          truststoreRealm:
            name: trust
        - name: using-credentials
          serverIdentities:
            ssl:
              keystore:
                alias: server
                path: ServerConfigurationParserTest-keystore.pfx
                credentialReference:
                  store: credentials
                  alias: keystore
              truststore:
                path: ServerConfigurationParserTest-truststore.pfx
                credentialReference:
                  store: credentials
                  alias: trust
          ldapRealm:
            name: ldap
            principal: 'uid=admin,ou=People,dc=infinispan,dc=org'
            url: 'ldap://${org.infinispan.test.host.address}:10389'
            credentialReference:
              store: credentials
              alias: ldap
            identityMapping:
              rdnIdentifier: uid
              searchDn: 'ou=People,dc=infinispan,dc=org'
          tokenRealm:
            name: token-test
            authServerUrl: 'http://${org.infinispan.test.host.address}:14567/auth/'
            clientId: infinispan-console
            principalClaim: username-claim
            oauth2Introspection:
              clientId: infinispan-server
              introspectionUrl: http://${org.infinispan.test.host.address}:14567/auth/realms/infinispan/protocol/openidConnect/token/introspect
              hostNameVerificationPolicy: ANY
              credentialReference:
                store: credentials
                alias: oauth2
          truststoreRealm:
            name: trust
        - name: basic
          serverIdentities: {}
          propertiesRealm:
            groupsAttribute: Roles
            userProperties:
              digestRealmName: digest
              path: ServerConfigurationParserTest-user.properties
              plainText: true
            groupProperties:
              path: ServerConfigurationParserTest-group.properties
    dataSources:
      - name: database
        jndiName: jdbc/database
        statistics: true
        connectionFactory:
          driver: org.h2.Driver
          username: test
          password: test
          url: 'jdbc:h2:tcp://${org.infinispan.test.host.address}:1521/test'
          newConnectionSql: SELECT 1
          connectionProperties:
            someproperty: somevalue
        connectionPool:
          backgroundValidation: '1000'
          idleRemoval: '1'
          initialSize: '1'
          leakDetection: '10000'
          maxSize: '10'
          minSize: '1'
          validateOnAcquisition: '500'
      - name: database-with-credential
        jndiName: jdbc/database-with-credential
        statistics: true
        connectionFactory:
          driver: org.h2.Driver
          username: test
          url: 'jdbc:h2:tcp://${org.infinispan.test.host.address}:1521/test'
          newConnectionSql: SELECT 1
          credentialReference:
            store: credentials
            alias: db
        connectionPool:
          backgroundValidation: '1000'
          idleRemoval: '1'
          initialSize: '1'
          leakDetection: '10000'
          maxSize: '10'
          minSize: '1'
    endpoints:
      - socketBinding: default
        securityRealm: default
        connectors:
          hotrod:
            hotrodConnector:
              idleTimeout: '2'
              receiveBufferSize: '20'
              sendBufferSize: '10'
              tcpNodelay: false
              tcpKeepalive: false
              ioThreads: '23'
              socketBinding: hotrod
              externalHost: external
              externalPort: '12345'
              topologyStateTransfer:
                awaitInitialRetrieval: false
                lockTimeout: '12'
                replicationTimeout: '13'
                lazyRetrieval: false
              authentication:
                securityRealm: default
                sasl:
                  serverName: localhost
                  mechanisms:
                    - GSSAPI
                    - DIGEST-MD5
                    - PLAIN
                  qop:
                    - auth
                    - auth-conf
                  strength:
                    - high
                    - medium
                    - low
                  policy:
                    - forward-secrecy
                    - no-active
                    - no-anonymous
                    - no-dictionary
                    - no-plain-text
                    - pass-credentials
                  properties:
                    com.sun.security.sasl.digest.realm: default
              encryption:
                requireSslClientAuth: true
                securityRealm: default
                sni:
                  - hostName: sni-host-1
                    securityRealm: default
                  - hostName: sni-host-2
                    securityRealm: default
          rest:
            restConnector:
              ioThreads: '11'
              socketBinding: rest
              extendedHeaders: NEVER
              contextPath: rest
              maxContentLength: '3'
              compressionLevel: '3'
              authentication:
                mechanisms:
                  - DIGEST
                  - BASIC
                securityRealm: default
              corsRules:
                - name: rule1
                  allowCredentials: true
                  maxAgeSeconds: '1'
                  allowedOrigins:
                    - origin1
                    - origin2
                  allowedMethods:
                    - GET
                    - POST
                  allowedHeaders:
                    - Accept
                  exposeHeaders:
                    - Accept
                    - ContentType
                - name: rule2
                  allowedOrigins: '*'
                  allowedMethods:
                    - GET
                    - POST
              encryption:
                requireSslClientAuth: false
                securityRealm: default
                sni:
                  - hostName: sni-host-3
                    securityRealm: default
                  - hostName: sni-host-4
                    securityRealm: default
          memcached:
            memcachedConnector:
              cache: string
              idleTimeout: '1'
              receiveBufferSize: '3'
              sendBufferSize: '3'
              tcpNodelay: true
              tcpKeepalive: true
              ioThreads: '1'
              socketBinding: memcached
              clientEncoding: application/json
