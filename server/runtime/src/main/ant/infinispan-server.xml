<?xml version="1.0" encoding="UTF-8"?>
<project name="testsuite" xmlns:if="ant:if">
    <target name="-check.skipped">
        <condition property="tests.skipped">
            <or>
                <isset property="skipTests"/>
                <isset property="maven.test.skip"/>
                <isset property="maven.test.skip.exec"/>
            </or>
        </condition>
    </target>

    <target name="create-distro" depends="-check.skipped" unless="tests.skipped">
        <echo message="Creating test server distro at ${server.dist}"/>
        <echo message="Using distribution ${server.build.dist}"/>
        <copy todir="${server.dist}">
            <fileset dir="${server.build.dist}"/>
        </copy>
        <copy file="${ispn.config.file}" todir="${server.dist}/server/conf" if:set="ispn.config.file" />
        <!-- It happens when you do not specify namespaces in the XSLT templates for the newly added nodes
             then the IBM jdk transformation is adding empty namespace there - not possible to influence this
             behaviour by any environmental property - this is a bit workaround for it -->
        <echo message="Removing empty xmlns attributes (xmlns='') which IBM JDK could produce"/>
        <replace dir="target" value="">
            <include name="server/standalone/configuration/**/*.xml"/>
            <replacetoken><![CDATA[xmlns=""]]></replacetoken>
        </replace>
    </target>

    <target name="start-server" depends="-check.skipped" unless="tests.skipped">
        <echo>Starting Infinispan server:</echo>
        <echo>  Server home: ${server.dist}</echo>
        <echo>  Configuration: ${jboss.config.file}</echo>
        <echo>  JVM: ${server.jvm}</echo>
        <echo>  Args: ${server.jvm.args}</echo>

        <exec dir="${server.dist}/bin" executable="chmod" osfamily="unix">
            <arg value="+x"/>
            <arg value="../bin"/>
            <arg value="server.sh"/>
        </exec>
        <exec executable="sh" osfamily="unix" spawn="true">
            <arg value="-c"/>
            <arg value="${server.dist}/bin/server.sh -c ${jboss.config.file} > ${server.dist}/console.log"/>
            <env key="JAVA_OPTS" value="${server.jvm.args} -Djboss.socket.binding.port-offset=${port.offset} -Djboss.node.name=${jboss.node.name}"/>
            <env key="JBOSS_HOME" value="${server.dist}"/>
            <env key="JAVA" value="${server.jvm}/bin/java"/>
        </exec>
        <exec executable="cmd" osfamily="windows" spawn="true">
            <arg value="/c"/>
            <arg value="${server.dist}/bin/server.bat -c ${jboss.config.file} > ${server.dist}/console.log"/>
            <env key="JAVA_OPTS" value="${server.jvm.args} -Djboss.socket.binding.port-offset=${port.offset} -Djboss.node.name=${jboss.node.name}"/>
            <env key="JBOSS_HOME" value="${server.dist}"/>
            <env key="JAVA" value="${server.jvm}/bin/java"/>
            <env key="STANDALONE_CONF" value="notfound.bat"/>
        </exec>
        <echo>Waiting for Infinispan server to start</echo>
        <waitfor timeoutproperty="server.timeout" maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
            <and>
                <socket server="127.0.0.1" port="${hotrod.port}"/>
            </and>
        </waitfor>
        <concat if:set="server.timeout">
            <fileset file="${server.dist}/console.log"/>
        </concat>
        <antcall target="kill-server" if:set="server.timeout"/>
        <fail message="Server did not start" if="server.timeout"/>
        <echo message="Infinispan server started"/>
    </target>

    <macrodef name="checkoutput">
        <attribute name="run-property"/>
        <attribute name="exitcode-property"/>
        <attribute name="output-property"/>

        <sequential>
            <condition property="@{run-property}">
                <and>
                    <equals arg1="${@{exitcode-property}}" arg2="0"/>
                    <isset property="@{output-property}"/>
                    <not>
                        <equals arg1="${@{output-property}}" arg2=""/>
                    </not>
                </and>
            </condition>
            <echo>@{run-property} = ${@{run-property}}: pid ${@{output-property}}, exit code ${@{exitcode-property}}</echo>
        </sequential>
    </macrodef>
    <target name="-do.kinit" depends="-check.skipped" unless="tests.skipped">
        <exec executable="bash" outputproperty="ps.pid" resultproperty="ps.result" failifexecutionfails="false"
              failonerror="false" osfamily="unix">
            <arg value="-c"/>
            <!-- Use \- to exclude the awk command -->
            <arg value="ps -eaf | awk '/jboss\-modules.jar/ {print $$2;}'"/>
            <redirector>
                <outputfilterchain>
                    <prefixlines prefix=" "/>
                    <striplinebreaks/>
                    <trim/>
                </outputfilterchain>
            </redirector>
        </exec>
        <checkoutput run-property="run.ps" exitcode-property="ps.result" output-property="ps.pid"/>

        <exec executable="bash" outputproperty="lsof.pid" resultproperty="lsof.result" failifexecutionfails="false" failonerror="false" osfamily="unix">
            <arg value="-c"/>
            <arg value="lsof -t -i TCP:${hotrod.port} -s TCP:LISTEN"/>
            <redirector>
                <outputfilterchain>
                    <prefixlines prefix=" "/>
                    <striplinebreaks/>
                    <trim/>
                </outputfilterchain>
            </redirector>
        </exec>
        <checkoutput run-property="run.lsof" exitcode-property="lsof.result" output-property="lsof.pid"/>

        <!--jps/jstat are not supported in IBM JDK we should add failifexecutionfails parameter to not fail when jps command does not exist -->
        <exec executable="${server.jvm}/bin/jps" outputproperty="jps.pid" resultproperty="jps.result"
              failifexecutionfails="false" failonerror="false">
            <redirector>
                <outputfilterchain>
                    <linecontains>
                        <contains value="jboss-modules.jar"/>
                    </linecontains>
                    <tokenfilter>
                        <replaceregex pattern=" .*" replace=" "/>
                    </tokenfilter>
                    <striplinebreaks/>
                </outputfilterchain>
            </redirector>
        </exec>
        <checkoutput run-property="run.jps" exitcode-property="jps.result" output-property="jps.pid"/>

        <exec executable="netstat" outputproperty="cmd.pid" resultproperty="cmd.result" failifexecutionfails="false"
              failonerror="false" osfamily="windows">
            <arg value="-aon"/>
            <redirector>
                <outputfilterchain>
                    <linecontains>
                        <contains value="LISTENING"/>
                        <contains value=":${hotrod.port}"/>
                    </linecontains>
                    <tokenfilter>
                        <replaceregex pattern=".*LISTENING([ \t]+)([0-9]+)" replace="\2" flags="gi"/>
                        <ignoreblank/>
                    </tokenfilter>
                    <striplinebreaks/>
                </outputfilterchain>
            </redirector>
        </exec>
        <checkoutput run-property="run.cmd" exitcode-property="cmd.result" output-property="cmd.pid"/>

        <fail message="Build requires either ps/jps/lsof (UNIX) or netstat (WINDOWS) in order to stop running servers">
            <condition>
                <not>
                    <or>
                        <equals arg1="${ps.result}" arg2="0"/>
                        <equals arg1="${lsof.result}" arg2="0"/>
                        <equals arg1="${jps.result}" arg2="0"/>
                        <equals arg1="${cmd.result}" arg2="0"/>
                    </or>
                </not>
            </condition>
        </fail>
    </target>

    <target name="-do.ps" if="run.ps">
        <exec executable="kill" osfamily="unix">
            <arg line="-9 ${ps.pid}"/>
        </exec>
    </target>

    <target name="-do.lsof" if="run.lsof">
        <exec executable="kill" osfamily="unix">
            <arg line="-9 ${lsof.pid}"/>
        </exec>
    </target>

    <target name="-do.jps" if="run.jps">
        <exec executable="kill" osfamily="unix">
            <arg line="-9 ${jps.pid}"/>
        </exec>
    </target>

    <target name="-do.cmd" if="run.cmd">
        <exec executable="taskkill" osfamily="windows">
            <arg line="/F /T /PID ${cmd.pid}"/>
        </exec>
    </target>

    <target name="kill-server" depends="-do.kinit, -do.ps, -do.lsof, -do.jps, -do.cmd"/>
</project>
