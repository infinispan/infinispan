<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!--
  ~ Copyright 2013 Red Hat, Inc. and/or its affiliates.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this library; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
  ~ 02110-1301 USA
  -->

<xs:schema attributeFormDefault="unqualified"
	elementFormDefault="qualified" version="1.0" targetNamespace="urn:infinispan:config:leveldb:5.2"
	xmlns:tns="urn:infinispan:config:leveldb:5.2" xmlns:config="urn:infinispan:config:5.2"
	xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:import namespace="urn:infinispan:config:5.2"
		schemaLocation="http://www.infinispan.org/schemas/infinispan-config-5.2.xsd" />

	<xs:element name="leveldbStore" type="tns:leveldbStoreType"/>
	
	<xs:complexType name="leveldbStoreType">
		<xs:complexContent>
			<xs:extension base="config:lockSupportStore">
				<xs:attribute name="location" type="xs:string" default="leveldb/data">
					<xs:annotation>
						<xs:documentation>
							
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="expiredLocation" type="xs:string" default="leveldb/expired">
					<xs:annotation>
						<xs:documentation>
							
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="implementationType" type="xs:string" default="AUTO" >
					<xs:annotation>
						<xs:documentation>
							Configures LevelDB implementation type.  It can be AUTO, JNI, or JAVA.
							When the type is AUTO, cache store will first try to detect if JNI implementation is
							available - if not, AUTO will fallback to pure Java implementation.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="clearThreshold" type="xs:integer" default="10000">
					<xs:annotation>
						<xs:documentation>
							
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="expiryQueueSize" type="xs:integer" default="10000">
					<xs:annotation>
						<xs:documentation>
							
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="blockSize" type="xs:integer">
					<xs:annotation>
						<xs:documentation>
							Configures LevelDB block size.  See LevelDB documentation.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="cacheSize" type="xs:long">
					<xs:annotation>
						<xs:documentation>
							Configures LevelDB cache size.  See LevelDB documentation.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="compressionType" type="xs:string" >
					<xs:annotation>
						<xs:documentation>
							Configures LevelDB compression type.  See LevelDB documentation. (NONE or SNAPPY)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
