<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2009 Red Hat Inc. and/or its affiliates and other
  ~ contributors as indicated by the @author tags. All rights reserved.
  ~ See the copyright.txt in the distribution for a full listing of
  ~ individual contributors.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<infinispan>

   <global>

      <asyncListenerExecutor factory="org.infinispan.executors.DefaultExecutorFactory">
      	 <properties>
         	<property name="maxThreads" value="5"/>
         	<property name="threadNamePrefix" value="AsyncListenerThread"/>
         </properties>
      </asyncListenerExecutor>

      <asyncTransportExecutor factory="org.infinispan.executors.DefaultExecutorFactory">
      	<properties>
         <property name="maxThreads" value="25"/>
         <property name="threadNamePrefix" value="AsyncSerializationThread"/>
         </properties>
      </asyncTransportExecutor>

      <evictionScheduledExecutor factory="org.infinispan.executors.DefaultScheduledExecutorFactory">
      <properties>
         <property name="threadNamePrefix" value="EvictionThread"/>
         </properties>
      </evictionScheduledExecutor>

      <replicationQueueScheduledExecutor factory="org.infinispan.executors.DefaultScheduledExecutorFactory">
      <properties>
         <property name="threadNamePrefix" value="ReplicationQueueThread"/>
         </properties>
      </replicationQueueScheduledExecutor>

      <transport clusterName="infinispan-cluster" distributedSyncTimeout="50000" nodeName="Jalapeno">
         <!-- Note that the JGroups transport uses sensible defaults if no configuration property is defined. -->
         <properties>
         <property name="configurationFile" value="udp.xml"/>
         </properties>
         <!-- See the JGroupsTransport javadocs for more flags -->
      </transport>

      <serialization marshallerClass="org.infinispan.marshall.VersionAwareMarshaller" version="1.0"/>
      <globalJmxStatistics enabled="false" jmxDomain="funky_domain"
                           mBeanServerLookup="org.infinispan.jmx.PerThreadMBeanServerLookup"
                           allowDuplicateDomains="true"/>

      <shutdown hookBehavior="REGISTER"/>
   </global>

   <default>
      <locking concurrencyLevel="100" lockAcquisitionTimeout="1000"/>
      <jmxStatistics enabled="false"/>
   </default>

   <namedCache name="transactional">
      <transaction transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup" useEagerLocking="true"/>
   </namedCache>

   <namedCache name="syncRepl">
      <clustering mode="repl">
         <stateTransfer fetchInMemoryState="false"/>
         <sync replTimeout="15000"/>
      </clustering>
   </namedCache>

   <namedCache name="asyncRepl">
      <clustering mode="repl">
         <stateTransfer fetchInMemoryState="false"/>
         <async asyncMarshalling="false"/>
      </clustering>
   </namedCache>

   <namedCache name="asyncReplQueue">
      <clustering mode="repl">
         <stateTransfer fetchInMemoryState="false"/>
         <async useReplQueue="true" replQueueInterval="1234" replQueueMaxElements="100"/>
      </clustering>
   </namedCache>

   <namedCache name="txSyncRepl">
      <transaction transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"/>
      <clustering mode="repl">
         <stateTransfer fetchInMemoryState="false"/>
         <sync replTimeout="15000"/>
      </clustering>
   </namedCache>

   <namedCache name="overriding">
      <locking isolationLevel="REPEATABLE_READ" concurrencyLevel="1000" lockAcquisitionTimeout="20000"/>
   </namedCache>

   <namedCache name="storeAsBinary">
      <locking isolationLevel="REPEATABLE_READ" concurrencyLevel="1000" lockAcquisitionTimeout="20000"/>
      <storeAsBinary enabled="true"/>
   </namedCache>

   <namedCache name="withLoader">
      <loaders passivation="false" shared="false" preload="true">

         <!--
            We can have multiple cache loaders, which get chained
         -->
         <loader class="org.infinispan.loaders.file.FileCacheStore" fetchPersistentState="true"
                 ignoreModifications="true" purgeOnStartup="true">

            <!-- See the documentation for more configuration examples and flags. -->
            <properties>
               <property name="location" value="/tmp/FileCacheStore-Location"/>
            </properties>
            <singletonStore enabled="true" pushStateWhenCoordinator="true" pushStateTimeout="20000"/>
            <async enabled="true" flushLockTimeout="15000" threadPoolSize="5"/>
         </loader>
      </loaders>
   </namedCache>

   <namedCache name="dist">
      <clustering mode="distribution">
         <sync/>
         <hash numOwners="3" rehashWait="120000"/>
         <l1 enabled="true" lifespan="600000"/>
      </clustering>
   </namedCache>

   <!-- Note that any of the elements appearing in a namedCache section can also appear in the default section as a template. -->
   <namedCache name="evictionCache">

      <!--
         Eviction configuration.
      -->
      <eviction maxEntries="5000" strategy="FIFO"/>
      <!--
         Expiration wakeUpInterval defines the interval between successive runs
         to purge expired entries from memory and any cache stores.
      -->
      <expiration wakeUpInterval="500" lifespan="60000" maxIdle="1000"/>
   </namedCache>

   <namedCache name="withouthJmxEnabled">
      <clustering>
         <async useReplQueue="true" replQueueInterval="100" replQueueMaxElements="200"/>
      </clustering>
      <jmxStatistics enabled="false"/>
   </namedCache>

   <namedCache name="withDeadlockDetection">
      <clustering>
         <sync replTimeout="20000"/>
      </clustering>
      <jmxStatistics enabled="false"/>
      <deadlockDetection enabled="true" spinDuration="1221"/>
   </namedCache>

   <namedCache name="withJDBCLoader">
      <clustering>
         <sync replTimeout="20000"/>
      </clustering>
      <jmxStatistics enabled="false"/>
      <deadlockDetection enabled="true" spinDuration="1221"/>
      <loaders passivation="true" shared="true" preload="true"> 
      	<loader class="org.infinispan.loaders.jdbc.stringbased.JdbcStringBasedCacheStore" fetchPersistentState="true"
                        ignoreModifications="true" purgeOnStartup="true">
           <properties>
             <property name="connectionFactoryClass" value="org.infinispan.loaders.jdbc.connectionfactory.SimpleConnectionFactory"/>
             <property name="connectionUrl" value="jdbc://some-url"/>
             <property name="userName" value="root"/>
             <property name="driverClass" value="org.dbms.Driver"/>
             <property name="idColumnType" value="VARCHAR2(256)"/>
             <property name="dataColumnType" value="BLOB"/>
             <property name="dropTableOnExit" value="true"/>
             <property name="createTableOnStart" value="false"/>
            </properties>
           <singletonStore enabled="true" pushStateWhenCoordinator="true" pushStateTimeout="20000"/>
            <async enabled="true" threadPoolSize="10" flushLockTimeout="10000"/>
       </loader>
     </loaders>
   </namedCache>


   <namedCache name="cacheWithCustomInterceptors">

      <!--
      Define custom interceptors.  All custom interceptors need to extend org.jboss.cache.interceptors.base.CommandInterceptor
      Here we use existing class so we can actually load it
      -->
      <customInterceptors>
         <interceptor position="FIRST" class="org.infinispan.interceptors.CallInterceptor"></interceptor>
         <interceptor position="LAST" class="org.infinispan.interceptors.CallInterceptor"/>
         <interceptor index="3" class="org.infinispan.interceptors.CallInterceptor"/>
         <interceptor before="org.infinispan.interceptors.CallInterceptor" class="org.infinispan.interceptors.CallInterceptor"/>
         <interceptor after="org.infinispan.interceptors.CallInterceptor" class="org.infinispan.interceptors.CallInterceptor"/>
      </customInterceptors>
   </namedCache>

</infinispan>
