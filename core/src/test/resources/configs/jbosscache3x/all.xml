<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2009 Red Hat Inc. and/or its affiliates and other
  ~ contributors as indicated by the @author tags. All rights reserved.
  ~ See the copyright.txt in the distribution for a full listing of
  ~ individual contributors.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.0">


    <!--
       isolation levels supported: READ_COMMITTED and REPEATABLE_READ
       nodeLockingSchemes: mvcc, pessimistic (deprecated), optimistic (deprecated)
    -->
    <locking
            isolationLevel="READ_COMMITTED"
            lockParentForChildInsertRemove="false"
            lockAcquisitionTimeout="234000"
            nodeLockingScheme="mvcc"
            writeSkewCheck="true"
            concurrencyLevel="510"/>

    <!--
    Used to register a transaction manager and participate in ongoing transactions.
    -->
    <transaction
            transactionManagerLookupClass="org.jboss.cache.transaction.GenericTransactionManagerLookup"
            syncRollbackPhase="true"
            syncCommitPhase="false"/>

    <!--
    Used to register JMX statistics in any available MBean server
    -->
    <jmxStatistics
            enabled="true"/>

    <!--
       If region based marshalling is used, defines whether new regions are inactive on startup.
    -->
    <startup
            regionsInactiveOnStartup="true"/>

    <!--
       Used to register JVM shutdown hooks.
       hookBehavior: DEFAULT, REGISTER, DONT_REGISTER
    -->
    <shutdown
            hookBehavior="DONT_REGISTER"/>

    <!--
       Used to define async listener notification thread pool size
    -->
    <listeners
            asyncPoolSize="123"
            asyncQueueSize="1020000"/>

    <!--
       Used to enable invocation batching and allow the use of Cache.startBatch()/endBatch() methods.
    -->
    <invocationBatching
            enabled="false"/>

    <!--
       serialization related configuration, used for replication and cache loading
    -->
    <serialization
            objectInputStreamPoolSize="12"
            objectOutputStreamPoolSize="14"
            version="3.0.0"
            marshallerClass="org.jboss.cache.marshall.VersionAwareMarshaller"
            useLazyDeserialization="true"
            useRegionBasedMarshalling="false"/>

    <!--
       This element specifies that the cache is clustered.
       modes supported: replication (r) or invalidation (i).
    -->
    <clustering mode="invalidation" clusterName="JBossCache-cluster">

        <!--
           Defines whether to retrieve state on startup
        -->
        <stateRetrieval timeout="2120000" fetchInMemoryState="false"/>

        <!--
           Network calls are synchronous.
        -->
        <sync replTimeout="22220000"/>
        <!--
           Uncomment this for async replication.
        -->
        <!--<async useReplQueue="true" replQueueInterval="10000" replQueueMaxElements="500" serializationExecutorPoolSize="20" serializationExecutorQueueSize="5000000"/>-->

        <!-- Uncomment to use Buddy Replication -->
        <!--
        <buddy enabled="true" poolName="myBuddyPoolReplicationGroup" communicationTimeout="2000">
           <dataGravitation auto="true" removeOnFind="true" searchBackupTrees="true"/>
           <locator class="org.jboss.cache.buddyreplication.NextMemberBuddyLocator">
              <properties>
                 numBuddies = 1
                 ignoreColocatedBuddies = true
              </properties>
           </locator>
        </buddy>
        -->

        <!--
           Configures the JGroups channel.  Looks up a JGroups config file on the classpath or filesystem.  udp.xml
           ships with jgroups.jar and will be picked up by the class loader.
        -->
        <jgroupsConfig>

            <UDP discard_incompatible_packets="true" enable_bundling="false" enable_diagnostics="false" ip_ttl="2"
                 loopback="true" max_bundle_size="64000" max_bundle_timeout="30" mcast_addr="228.10.10.10"
                 mcast_port="45588" mcast_recv_buf_size="25000000" mcast_send_buf_size="640000"
                 oob_thread_pool.enabled="true" oob_thread_pool.keep_alive_time="10000" oob_thread_pool.max_threads="4"
                 oob_thread_pool.min_threads="1" oob_thread_pool.queue_enabled="true"
                 oob_thread_pool.queue_max_size="10"
                 oob_thread_pool.rejection_policy="Run" thread_naming_pattern="pl" thread_pool.enabled="true"
                 thread_pool.keep_alive_time="30000" thread_pool.max_threads="25" thread_pool.min_threads="1"
                 thread_pool.queue_enabled="true" thread_pool.queue_max_size="10" thread_pool.rejection_policy="Run"
                 tos="8" ucast_recv_buf_size="20000000" ucast_send_buf_size="640000" use_concurrent_stack="true"
                 use_incoming_packet_handler="true"/>
            <PING num_initial_members="3" timeout="2000"/>
            <MERGE2 max_interval="30000" min_interval="10000"/>
            <FD_SOCK/>
            <FD max_tries="5" shun="true" timeout="10000"/>
            <VERIFY_SUSPECT timeout="1500"/>
            <pbcast.NAKACK discard_delivered_msgs="true" retransmit_timeout="300,600,1200,2400,4800"
                           use_mcast_xmit="false"/>
            <UNICAST timeout="300,600,1200,2400,3600"/>
            <pbcast.STABLE desired_avg_gossip="50000" max_bytes="400000" stability_delay="1000"/>
            <pbcast.GMS join_timeout="5000" print_local_addr="true" shun="false" view_ack_collection_timeout="5000"
                        view_bundling="true"/>
            <FRAG2 frag_size="60000"/>
            <pbcast.STREAMING_STATE_TRANSFER/>
            <pbcast.FLUSH timeout="0"/>

        </jgroupsConfig>
    </clustering>

    <!--
       Eviction configuration.  WakeupInterval defines how often the eviction thread runs, in milliseconds.  0 means
       the eviction thread will never run.
    -->
    <eviction wakeUpInterval="50015">
        <default algorithmClass="org.jboss.cache.eviction.LRUAlgorithm" eventQueueSize="200000">
            <property name="maxNodes" value="5001"/>
            <property name="timeToLive" value="1001"/>
        </default>
        <region name="/org/jboss/data1">
            <property name="timeToLive" value="2002"/>
            <property name="maxNodes" value="3002"/>
        </region>
        <region name="/org/jboss/data2" algorithmClass="org.jboss.cache.eviction.FIFOAlgorithm" eventQueueSize="100000">
            <property name="maxNodes" value="3003"/>
            <property name="minTimeToLive" value="4003"/>
        </region>
    </eviction>

    <!--
       Cache loaders.

       If passivation is enabled, state is offloaded to the cache loaders ONLY when evicted.  Similarly, when the state
       is accessed again, it is removed from the cache loader and loaded into memory.

       Otherwise, state is always maintained in the cache loader as well as in memory.

       Set 'shared' to true if all instances in the cluster use the same cache loader instance, e.g., are talking to the
       same database.
    -->
    <loaders passivation="true" shared="true">
        <preload>
            <node fqn="/org/jboss"/>
            <node fqn="/org/tempdata"/>
        </preload>

        <!--
           we can have multiple cache loaders, which get chained
        -->
        <loader class="org.jboss.cache.loader.FileCacheLoader" async="true" fetchPersistentState="true"
                ignoreModifications="true" purgeOnStartup="true">

            <properties>
                location=jbosscache
            </properties>
            <!-- alternatively use a connection from a datasource, as per the code sample below-->
            <!--<properties>-->
            <!--cache.jdbc.datasource=AllSampleDS-->
            <!--cache.jdbc.table.name=jbosscache-->
            <!--cache.jdbc.table.create=true-->
            <!--cache.jdbc.table.drop=true-->
            <!--</properties>-->
            <singletonStore enabled="true" class="org.jboss.cache.loader.SingletonStoreCacheLoader">
                <properties>
                    pushStateWhenCoordinator=true
                    pushStateWhenCoordinatorTimeout=20000
                </properties>
            </singletonStore>
        </loader>
    </loaders>

    <!--
       Define custom interceptors.  All custom interceptors need to extend org.jboss.cache.interceptors.base.CommandInterceptor
    -->
    <!--
    <customInterceptors>
       <interceptor position="first" class="org.jboss.cache.config.parsing.custominterceptors.AaaCustomInterceptor">
          <property name="attrOne" value="value1" />
          <property name="attrTwo" value="value2" />
       </interceptor>
       <interceptor position="last" class="org.jboss.cache.config.parsing.custominterceptors.BbbCustomInterceptor"/>
       <interceptor index="3" class="org.jboss.cache.config.parsing.custominterceptors.AaaCustomInterceptor"/>
       <interceptor before="org.jboss.cache.interceptors.CallInterceptor"
                    class="org.jboss.cache.config.parsing.custominterceptors.BbbCustomInterceptor"/>
       <interceptor after="org.jboss.cache.interceptors.CallInterceptor"
                    class="org.jboss.cache.config.parsing.custominterceptors.AaaCustomInterceptor"/>
    </customInterceptors>
    -->
</jbosscache>
