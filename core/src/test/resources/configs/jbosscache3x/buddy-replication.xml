<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2009 Red Hat Inc. and/or its affiliates and other
  ~ contributors as indicated by the @author tags. All rights reserved.
  ~ See the copyright.txt in the distribution for a full listing of
  ~ individual contributors.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.0">

   <transaction transactionManagerLookupClass="org.jboss.cache.transaction.GenericTransactionManagerLookup"/>

   <clustering mode="replication">
      <!--
         timeout: The max amount of time (in milliseconds) we wait until the state (i.e. the contents of the cache) is
             retrieved from existing members in a clustered environment
      -->
      <stateRetrieval timeout="20000"/>


      <!-- JGroups protocol stack properties. -->
      <jgroupsConfig>
         <TCP start_port="7800" discard_incompatible_packets="true" enable_bundling="false" enable_diagnostics="true"
              enable_unicast_bundling="false" loopback="true" max_bundle_size="64000" max_bundle_timeout="30"
              oob_thread_pool.enabled="true" oob_thread_pool.keep_alive_time="10000" oob_thread_pool.max_threads="8"
              oob_thread_pool.min_threads="2" oob_thread_pool.queue_enabled="false" oob_thread_pool.queue_max_size="10"
              oob_thread_pool.rejection_policy="Run" recv_buf_size="20000000" thread_naming_pattern="pl"
              thread_pool.enabled="true" thread_pool.keep_alive_time="30000" thread_pool.max_threads="4"
              thread_pool.min_threads="1" thread_pool.queue_enabled="true" thread_pool.queue_max_size="10000"
              thread_pool.rejection_policy="discard" use_concurrent_stack="true"
              use_send_queues="false"/>
         <MPING mcast_addr="232.1.2.3" num_initial_members="3" timeout="2000"/>
         <MERGE2 max_interval="30000" min_interval="10000"/>
         <FD_SOCK/>
         <FD max_tries="5" shun="true" timeout="10000"/>
         <VERIFY_SUSPECT timeout="1500"/>
         <pbcast.NAKACK discard_delivered_msgs="true" retransmit_timeout="300,600,1200,2400,4800"
                        use_mcast_xmit="false"/>
         <pbcast.STABLE desired_avg_gossip="50000" max_bytes="400000" stability_delay="1000"/>
         <pbcast.GMS join_timeout="5000" print_local_addr="true" shun="false"
                     view_ack_collection_timeout="5000" view_bundling="true"/>
         <FC max_credits="1000000" min_threshold="0.20"/>
         <FRAG2 frag_size="60000"/>
         <pbcast.STREAMING_STATE_TRANSFER/>
         <pbcast.FLUSH timeout="0"/>
      </jgroupsConfig>


      <!-- Number of milliseconds to wait until all responses for a synchronous call have been received -->
      <sync replTimeout="15000"/>

      <!--
        poolName: A way to specify a preferred replication group.  If specified, we try and pick a buddy why shares
                     the same pool name (falling back to other buddies if not available).  This allows the sysdmin
                     to hint at backup buddies are picked, so for example, nodes may be hinted to pick buddies
                     on a different physical rack or power supply for added fault tolerance.
        communicationTimeout : communication timeout for inter-buddy group organisation messages (such as assigning
                              to and removing from groups
                       -->
      <buddy enabled="true" poolName="myBuddyPoolReplicationGroup" communicationTimeout="2000">

         <!--
         auto : Should data gravitation be attempted whenever there is a cache miss on finding a node?
                If false, data will only be gravitated if an Option is set enabling it
         removeOnFind: removes data on remote caches' trees and backup subtrees when gravitated to a
                       new data owner
         searchBackupTrees: search backup subtrees as well for data when gravitating.  Results in backup nodes
                            being able to answer data gravitation requests.-->
         <dataGravitation auto="false" removeOnFind="true" searchBackupTrees="true"/>

         <locator class="org.jboss.cache.buddyreplication.NextMemberBuddyLocator">
            <!-- numBuddies is the number of backup nodes each node maintains.  ignoreColocatedBuddies means that
           each node will *try* to select a buddy on a different physical host.  If not able to do so though,
            it will fall back to colocated nodes. -->
            <properties>
               numBuddies = 1
               ignoreColocatedBuddies = true
            </properties>
         </locator>
      </buddy>
   </clustering>
</jbosscache>
