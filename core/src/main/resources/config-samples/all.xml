<?xml version="1.0" encoding="UTF-8"?>
<infinispan
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="urn:infinispan:config:4.1 http://www.infinispan.org/schemas/infinispan-config-4.1.xsd"
      xmlns="urn:infinispan:config:4.1">

   <!-- *************************** -->
   <!-- System-wide global settings -->
   <!-- *************************** -->

   <global>

      <!-- Note that if these are left blank, defaults are used.  See the user guide for what these defaults are -->
      <asyncListenerExecutor factory="org.infinispan.executors.DefaultExecutorFactory">
         <properties>
         	<property name="maxThreads" value="5"/>
         	<property name="threadNamePrefix" value="AsyncListenerThread"/>
         </properties>
      </asyncListenerExecutor>

      <asyncTransportExecutor factory="org.infinispan.executors.DefaultExecutorFactory">
         <properties>
         	<property name="maxThreads" value="25"/>
         	<property name="threadNamePrefix" value="AsyncSerializationThread"/>
         </properties>
      </asyncTransportExecutor>

      <evictionScheduledExecutor factory="org.infinispan.executors.DefaultScheduledExecutorFactory">
         <properties>
         	<property name="threadNamePrefix" value="EvictionThread"/>
         </properties>
      </evictionScheduledExecutor>

      <replicationQueueScheduledExecutor factory="org.infinispan.executors.DefaultScheduledExecutorFactory">
         <properties>
         	<property name="threadNamePrefix" value="ReplicationQueueThread"/>
         </properties>
      </replicationQueueScheduledExecutor>

      <globalJmxStatistics enabled="true" jmxDomain="infinispan"/>

      <!--
         If the transport is omitted, there is no way to create distributed or clustered caches.
         There is no added cost to defining a transport but not creating a cache that uses one, since the transport
         is created and initialized lazily.
      -->
      <transport clusterName="infinispan-cluster" machineId="m1" rackId="r1" siteId="s1" distributedSyncTimeout="50000" nodeName="Jalapeno"/>
         <!-- Note that the JGroups transport uses sensible defaults if no configuration property is defined. -->
         <!-- See the JGroupsTransport javadocs for more flags -->

      <!-- Again, sensible defaults are used here if this is omitted.  -->
      <serialization marshallerClass="org.infinispan.marshall.VersionAwareMarshaller" version="1.0">
         <!-- User defined marshallable classes alongside their corresponding externalizer and id numbers -->
         <marshallables>
            <!-- With Externalizer defined as inner static class -->
            <marshallable id="456" typeClass="org.infinispan.marshall.ForeignExternalizerTest$LegacyObj"
                          externalizerClass="org.infinispan.marshall.ForeignExternalizerTest$LegacyObjExternalizer"/>
            <!-- With Externalizer defined as normarl class -->
            <marshallable id="789" typeClass="java.util.concurrent.ConcurrentSkipListMap"
                          externalizerClass="org.infinispan.marshall.exts.MapExternalizer"/>
         </marshallables>
      </serialization>

      <!--
         Used to register JVM shutdown hooks.
         hookBehavior: DEFAULT, REGISTER, DONT_REGISTER
      -->
      <shutdown hookBehavior="DEFAULT"/>
   </global>

   <!-- *************************** -->
   <!-- Default "template" settings -->
   <!-- *************************** -->
   <!-- this is used as a "template" configuration for all caches in the system. -->
   <default>
      <!--
         isolation levels supported: READ_COMMITTED and REPEATABLE_READ
      -->
      <locking
            isolationLevel="REPEATABLE_READ"
            lockAcquisitionTimeout="20000"
            writeSkewCheck="false"
            concurrencyLevel="500"
            useLockStriping="true"
            />

      <!--
      Used to register a transaction manager and participate in ongoing transactions.
      -->
      <transaction
            transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
            syncRollbackPhase="false"
            syncCommitPhase="false"
            useEagerLocking="true" eagerLockSingleNode="true"/>

      <!--
      Used to register JMX statistics in any available MBean server
      -->
      <jmxStatistics enabled="false"/>

      <lazyDeserialization enabled="false"/>

      <!--
         Used to enable invocation batching and allow the use of Cache.startBatch()/endBatch() methods.
      -->
      <invocationBatching enabled="false"/>

      <!--
         This element specifies that the cache is clustered.
         modes supported: distribution (d), replication (r) or invalidation (i).
      -->
      <clustering mode="replication">

         <!--
            Defines whether to retrieve state on startup
         -->
         <stateRetrieval timeout="20000" fetchInMemoryState="false" alwaysProvideInMemoryState="false"/>

         <!--
            Network calls are synchronous.
         -->
         <sync replTimeout="20000"/>
         <!--
            Uncomment this for async replication.
         -->
         <!--<async useReplQueue="true" replQueueInterval="10000" replQueueMaxElements="500"/>-->
      </clustering>

   </default>

   <!-- ************************************** -->
   <!-- Individually configured "named" caches -->
   <!-- ************************************** -->

   <namedCache name="asyncCache">
      <clustering mode="replication">
         <async asyncMarshalling="true"/>
      </clustering>
   </namedCache>

   <!-- Note that any of the elements appearing in a namedCache section can also appear in the default section as a template. -->
   <namedCache name="evictionCache">

      <!--
         Eviction configuration.  WakeupInterval defines how often the eviction thread runs, in milliseconds.  0 means
         the eviction thread will never run.  A separate executor is used for eviction in each cache.
      -->
      <eviction wakeUpInterval="500" maxEntries="5000" strategy="FIFO"  threadPolicy="PIGGYBACK"/>
      <expiration lifespan="60000" maxIdle="1000"/>
   </namedCache>


   <namedCache name="persistentCache">
      <!--
            Cache loaders.

            If passivation is enabled, state is offloaded to the cache loaders ONLY when evicted.  Similarly, when the state
            is accessed again, it is removed from the cache loaderold and loaded into memory.

            Otherwise, state is always maintained in the cache loaderold as well as in memory.

            Set 'shared' to true if all instances in the cluster use the same cache loaderold instance, e.g., are talking to the
            same database.

            If "preload" is true, all keys are loaded from the cache loaderold into memory upon starting the cache.
         -->
      <loaders passivation="false" shared="false" preload="true">

         <!--
            We can have multiple cache loaders, which get chained
         -->
         <loader class="org.infinispan.loaders.file.FileCacheStore" fetchPersistentState="true"
                 ignoreModifications="true" purgeOnStartup="true">

            <!-- See the documentation for more configuration examples and flags. -->
            <properties>
               <property name="location" value="${java.io.tmpdir}"/>
            </properties>
            <singletonStore enabled="true" pushStateWhenCoordinator="true" pushStateTimeout="20000"/>
            <async enabled="true" flushLockTimeout="15000" threadPoolSize="5"/>
         </loader>
      </loaders>

      <deadlockDetection enabled="true" spinDuration="1000"/>

   </namedCache>

   <namedCache name="distributedCache">
      <clustering mode="distribution">
         <sync/>
         <!--
            num owners: number of owners for each key.  The larger this number is, the safer your data will be, but the
                        slower the cluster will be.

            rehashRpcTimeout: timeout used for RPC calls relating to rehashing.  This defaults to 600000 (10 minutes).
         -->
         <hash numOwners="3" rehashWait="120000" rehashRpcTimeout="600000"/>
         <l1 enabled="true" lifespan="600000"/>
      </clustering>
   </namedCache>

   <namedCache name="withReplicationQueue">
      <clustering mode="r">
         <async useReplQueue="true" replQueueInterval="100" replQueueMaxElements="200"/>
      </clustering>
   </namedCache>

   <namedCache name="lockPerEntry">
      <locking useLockStriping="false" />
   </namedCache>

   <namedCache name="cacheWithCustomInterceptors">
      <!--
      Define custom interceptors.  All custom interceptors need to extend org.jboss.cache.interceptors.base.CommandInterceptor
      -->
      <!--
      <customInterceptors>
         <interceptor position="first" class="com.mycompany.CustomInterceptor1">
            <property name="com.mycompany.attributeOne" value="value1" />
            <property name="com.mycompany.attributeTwo" value="value2" />
         </interceptor>
         <interceptor position="last" class="com.mycompany.CustomInterceptor2"/>
         <interceptor index="3" class="com.mycompany.CustomInterceptor1"/>
         <interceptor before="org.infinispanpan.interceptors.CallInterceptor" class="com.mycompany.CustomInterceptor2"/>
         <interceptor after="org.infinispanpan.interceptors.CallInterceptor" class="com.mycompany.CustomInterceptor1"/>
      </customInterceptors>
      -->
   </namedCache>
</infinispan>
