<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2012 Red Hat Inc. and/or its affiliates and other contributors
  ~ as indicated by the @author tags. All rights reserved.
  ~ See the copyright.txt in the distribution for a
  ~ full listing of individual contributors.
  ~
  ~ This copyrighted material is made available to anyone wishing to use,
  ~ modify, copy, or redistribute it subject to the terms and conditions
  ~ of the GNU Lesser General Public License, v. 2.1.
  ~ This program is distributed in the hope that it will be useful, but WITHOUT A
  ~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  ~ PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  ~ You should have received a copy of the GNU Lesser General Public License,
  ~ v.2.1 along with this distribution; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ~ MA  02110-1301, USA.
  -->

<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" version="1.0" targetNamespace="urn:infinispan:config:5.1" xmlns:tns="urn:infinispan:config:5.1" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:element name="globalConfiguration" type="tns:globalConfiguration"/>

  <xs:element name="infinispan" type="tns:infinispanConfiguration"/>

  <xs:element name="namedCacheConfiguration" type="tns:configuration"/>

  <xs:complexType name="infinispanConfiguration">
    <xs:sequence>
      <xs:element name="global" type="tns:globalConfiguration" minOccurs="0"/>
      <xs:element name="default" type="tns:configuration" minOccurs="0"/>
      <xs:element name="namedCache" type="tns:configuration" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="globalConfiguration">
    <xs:annotation>
      <xs:documentation>
         Defines global settings shared among all cache instances created by a single CacheManager.
      </xs:documentation>
    </xs:annotation>
        <xs:all>
          <xs:element name="asyncListenerExecutor" type="tns:executorFactoryType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Configuration for the executor service used to emit notifications to asynchronous listeners
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="asyncTransportExecutor" type="tns:executorFactoryType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Configuration for the executor service used for asynchronous work on the Transport, including asynchronous marshalling and Cache 'async operations' such as Cache.putAsync().
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="evictionScheduledExecutor" type="tns:scheduledExecutorFactoryType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Configuration for the scheduled executor service used to periodically run eviction cleanup tasks.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="replicationQueueScheduledExecutor" type="tns:scheduledExecutorFactoryType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Configuration for the scheduled executor service used to periodically flush replication queues, used if asynchronous clustering is enabled along with useReplQueue being set to true.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="globalJmxStatistics" type="tns:globalJmxStatisticsType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  This element specifies whether global statistics are gathered and reported via JMX for all caches under this cache manager.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="transport" type="tns:transportType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  This element configures the transport used for network communications across the cluster.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="serialization" type="tns:serializationType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Configures serialization and marshalling settings.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="shutdown" type="tns:shutdownType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  This element specifies behavior when the JVM running the cache instance shuts down.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:all>
  </xs:complexType>

  <xs:complexType name="executorFactoryType">
     <xs:sequence>
       <xs:element name="properties" type="tns:propertiesType" minOccurs="0">
         <xs:annotation>
            <xs:documentation>
               Add key/value property pair to this factory configuration. Example properties include "maxThreads" which sets the maximum number of threads for this executor (default values can be found at https://docs.jboss.org/author/display/ISPN/Default+Values+For+Property+Based+Attribute). Another example is "threadNamePrefix" which sets the thread name prefix for threads created by this executor (default values can be found at https://docs.jboss.org/author/display/ISPN/Default+Values+For+Property+Based+Attributes).
            </xs:documentation>
         </xs:annotation>
       </xs:element>
     </xs:sequence>
     <xs:attribute name="factory" type="xs:string">
      <xs:annotation>
         <xs:documentation>
            Fully qualified class name of the ExecutorFactory to use.  Must implement org.infinispan.executors.ExecutorFactory
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  <xs:complexType name="factoryClassWithPropertiesType" abstract="true">
     <xs:sequence>
       <xs:element name="properties" type="tns:propertiesType" minOccurs="0">
         <xs:annotation>
            <xs:documentation>
               Add key/value property pair to this factory configuration.
            </xs:documentation>
         </xs:annotation>
       </xs:element>
     </xs:sequence>
  </xs:complexType>

  <xs:complexType name="propertiesType">
    <xs:sequence>
      <xs:element name="property" type="tns:property" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="property">
    <xs:sequence/>
    <xs:attribute name="name" type="xs:string"/>
    <xs:attribute name="value" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="scheduledExecutorFactoryType">
    <xs:sequence>
       <xs:element name="properties" type="tns:propertiesType" minOccurs="0">
         <xs:annotation>
            <xs:documentation>
               Add key/value property pair to this factory configuration. Example properties include "maxThreads" which sets the maximum number of threads for this executor (default values can be found at https://docs.jboss.org/author/display/ISPN/Default+Values+For+Property+Based+Attribute). Another example is "threadNamePrefix" which sets the thread name prefix for threads created by this executor (default values can be found at https://docs.jboss.org/author/display/ISPN/Default+Values+For+Property+Based+Attributes).
            </xs:documentation>
         </xs:annotation>
       </xs:element>
     </xs:sequence>
     <xs:attribute name="factory" type="xs:string">
      <xs:annotation>
         <xs:documentation>
            Fully qualified class name of the ScheduledExecutorFactory to use.  Must implement org.infinispan.executors.ScheduledExecutorFactory
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  <xs:complexType name="globalJmxStatisticsType">
        <xs:sequence>
          <xs:element name="properties" type="tns:propertiesType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Sets properties which are then passed to the MBean Server Lookup implementation specified.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="allowDuplicateDomains" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>
               If true, multiple cache manager instances could be configured under the same configured JMX domain. Each cache manager will in practice use a different JMX domain that has been calculated based on the configured one by adding an incrementing index to it.
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cacheManagerName" type="xs:string">
         <xs:annotation>
            <xs:documentation>
               If JMX statistics are enabled, this property represents the name of this cache manager. It offers the possibility for clients to provide a user-defined name to the cache manager which later can be used to identify the cache manager within a JMX based management tool amongst other cache managers that might be running under the same JVM.
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enabled" type="xs:boolean"/>
        <xs:attribute name="jmxDomain" type="xs:string">
         <xs:annotation>
            <xs:documentation>
               If JMX statistics are enabled then all 'published' JMX objects will appear under this name. This is optional, if not specified an object name will be created for you by default.
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="mBeanServerLookup" type="xs:string">
         <xs:annotation>
            <xs:documentation>
               Class that will attempt to locate a JMX MBean server to bind to
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
  </xs:complexType>

  <xs:complexType name="transportType">
        <xs:sequence>
          <xs:element name="properties" type="tns:propertiesType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Sets transport properties
               </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="clusterName" type="xs:string">
           <xs:annotation>
            <xs:documentation>
               Defines the name of the cluster. Nodes only connect to clusters sharing the same name.
            </xs:documentation>
           </xs:annotation>
        </xs:attribute>
        <xs:attribute name="distributedSyncTimeout" type="xs:long">
         <xs:annotation>
            <xs:documentation>
               Infinispan uses a distributed lock to maintain a coherent transaction log during state transfer or rehashing which means that only one cache can be doing state transfer or rehashing at the same time. This constraint is in place because more than one cache could be involved in a transaction. This timeout controls the time to wait to acquire acquire a lock on the distributed lock.
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="machineId" type="xs:string">
         <xs:annotation>
            <xs:documentation>
               The id of the machine where this node runs. Vist http://community.jboss.org/wiki/DesigningServerHinting for more information .
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="nodeName" type="xs:string">
         <xs:annotation>
            <xs:documentation>
                Name of the current node. This is a friendly name to make logs, etc. make more sense. Defaults to a combination of host name and a random number (to differentiate multiple nodes on the same host)
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="rackId" type="xs:string">
        <xs:annotation>
            <xs:documentation>
               The id of the rack where this node runs. Vist http://community.jboss.org/wiki/DesigningServerHinting for more information .
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="siteId" type="xs:string">
        <xs:annotation>
            <xs:documentation>
               The id of the site where this node runs. Vist http://community.jboss.org/wiki/DesigningServerHinting for more information .
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="strictPeerToPeer" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>
               If set to true, RPC operations will fail if the named cache does not exist on remote nodes with a NamedCacheNotFoundException. Otherwise, operations will succeed but it will be logged on the caller that the RPC did not succeed on certain nodes due to the named cache not being available.
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="transportClass" type="xs:string">
        <xs:annotation>
         <xs:documentation>
            Class that represents a network transport. Must implement org.infinispan.remoting.transport.Transport
         </xs:documentation>
        </xs:annotation>
        </xs:attribute>
  </xs:complexType>

  <xs:complexType name="serializationType">
        <xs:sequence>
          <xs:element name="advancedExternalizers" type="tns:advancedExternalizersType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Configures custom marshallers.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="marshallerClass" type="xs:string">
         <xs:annotation>
            <xs:documentation>
               Fully qualified name of the marshaller to use. It must implement org.infinispan.marshall.StreamingMarshaller
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
        <xs:attribute name="version" type="xs:string">
         <xs:annotation>
            <xs:documentation>
               Largest allowable version to use when marshalling internal state. Set this to the lowest version cache instance in your cluster to ensure compatibility of communications. However, setting this too low will mean you lose out on the benefit of improvements in newer versions of the marshaller.
            </xs:documentation>
         </xs:annotation>
        </xs:attribute>
  </xs:complexType>

  <xs:complexType name="advancedExternalizersType">
     <xs:sequence>
       <xs:element name="advancedExternalizer" type="tns:advancedExternalizerConfig" minOccurs="0" maxOccurs="unbounded"/>
     </xs:sequence>
  </xs:complexType>

  <xs:complexType name="advancedExternalizerConfig">
     <xs:attribute name="externalizerClass" type="xs:string"/>
     <xs:attribute name="id" type="xs:int"/>
  </xs:complexType>

  <xs:complexType name="shutdownType">
     <xs:attribute name="hookBehavior" type="tns:shutdownHookBehavior"/>
  </xs:complexType>

  <xs:complexType name="configuration">
        <xs:all>
          <xs:element name="locking" type="tns:lockingType" minOccurs="0"/>
          <xs:element name="loaders" type="tns:cacheLoaderManagerConfig" minOccurs="0"/>
          <xs:element name="transaction" type="tns:transactionType" minOccurs="0"/>
          <xs:element name="customInterceptors" type="tns:customInterceptorsType" minOccurs="0"/>
          <xs:element name="dataContainer" type="tns:dataContainerType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Controls the data container for the cache.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="eviction" type="tns:evictionType" minOccurs="0"/>
          <xs:element name="expiration" type="tns:expirationType" minOccurs="0"/>
          <xs:element name="unsafe" type="tns:unsafeType" minOccurs="0"/>
          <xs:element name="clustering" type="tns:clusteringType" minOccurs="0"/>
          <xs:element name="jmxStatistics" type="tns:jmxStatistics" minOccurs="0"/>
          <xs:element name="storeAsBinary" type="tns:storeAsBinary" minOccurs="0"/>
          <xs:element name="lazyDeserialization" type="tns:lazyDeserialization" minOccurs="0"/>
          <xs:element name="invocationBatching" type="tns:invocationBatching" minOccurs="0"/>
          <xs:element name="deadlockDetection" type="tns:deadlockDetectionType" minOccurs="0">
            <xs:annotation>
               <xs:documentation>
                  Configures deadlock detection.
               </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="indexing" type="tns:queryConfigurationBean" minOccurs="0"/>
        </xs:all>
        <xs:attribute name="name" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="lockingType">
     <xs:attribute name="concurrencyLevel" type="xs:int"/>
     <xs:attribute name="isolationLevel" type="tns:isolationLevel"/>
     <xs:attribute name="lockAcquisitionTimeout" type="xs:long"/>
     <xs:attribute name="useLockStriping" type="xs:boolean"/>
     <xs:attribute name="writeSkewCheck" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="cacheLoaderManagerConfig">
     <xs:sequence>
       <xs:element name="loader" type="tns:abstractCacheStoreConfig" minOccurs="0" maxOccurs="unbounded"/>
     </xs:sequence>
     <xs:attribute name="passivation" type="xs:boolean"/>
     <xs:attribute name="preload" type="xs:boolean"/>
     <xs:attribute name="shared" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="abstractCacheStoreConfig">
     <xs:all>
       <xs:element name="async" type="tns:asyncStoreConfig" minOccurs="0"/>
       <xs:element name="singletonStore" type="tns:singletonStoreConfig" minOccurs="0"/>
       <xs:element name="properties" type="tns:propertiesType" minOccurs="0"/>
     </xs:all>
     <xs:attribute name="fetchPersistentState" type="xs:boolean"/>
     <xs:attribute name="ignoreModifications" type="xs:boolean"/>
     <xs:attribute name="purgeOnStartup" type="xs:boolean"/>
     <xs:attribute name="purgeSynchronously" type="xs:boolean"/>
     <xs:attribute name="purgerThreads" type="xs:int"/>
  </xs:complexType>

  <xs:complexType name="abstractCacheLoaderConfig">
     <xs:attribute name="class" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="asyncStoreConfig">
     <xs:attribute name="enabled" type="xs:boolean"/>
     <xs:attribute name="flushLockTimeout" type="xs:long"/>
     <xs:attribute name="shutdownTimeout" type="xs:long"/>
     <xs:attribute name="threadPoolSize" type="xs:int"/>
  </xs:complexType>

  <xs:complexType name="singletonStoreConfig">
     <xs:attribute name="pushStateTimeout" type="xs:long"/>
     <xs:attribute name="pushStateWhenCoordinator" type="xs:boolean"/>
     <xs:attribute name="enabled" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="transactionType">
     <xs:sequence>
       <xs:element name="recovery" type="tns:recoveryType" minOccurs="0"/>
     </xs:sequence>
     <xs:attribute name="cacheStopTimeout" type="xs:int"/>
     <xs:attribute name="eagerLockSingleNode" type="xs:boolean"/>
     <xs:attribute name="syncCommitPhase" type="xs:boolean"/>
     <xs:attribute name="syncRollbackPhase" type="xs:boolean"/>
     <xs:attribute name="transactionManagerLookupClass" type="xs:string"/>
     <xs:attribute name="useEagerLocking" type="xs:boolean"/>
     <xs:attribute name="useSynchronization" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="recoveryType">
     <xs:attribute name="enabled" type="xs:boolean" use="required"/>
     <xs:attribute name="recoveryInfoCacheName" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="customInterceptorsType">
     <xs:sequence>
       <xs:element name="interceptor" type="tns:interceptor" minOccurs="0" maxOccurs="unbounded"/>
     </xs:sequence>
  </xs:complexType>

  <xs:complexType name="interceptor">
     <xs:sequence>
       <xs:element name="properties" type="tns:propertiesType" minOccurs="0"/>
     </xs:sequence>
     <xs:attribute name="after" type="xs:string"/>
     <xs:attribute name="before" type="xs:string"/>
     <xs:attribute name="class" type="xs:string"/>
     <xs:attribute name="index" type="xs:int"/>
     <xs:attribute name="position" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="dataContainerType">
     <xs:sequence>
       <xs:element name="properties" type="tns:propertiesType" minOccurs="0"/>
     </xs:sequence>
     <xs:attribute name="class" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="evictionType">
     <xs:attribute name="maxEntries" type="xs:int"/>
     <xs:attribute name="strategy" type="tns:evictionStrategy"/>
     <xs:attribute name="threadPolicy" type="tns:evictionThreadPolicy"/>
     <xs:attribute name="wakeUpInterval" type="xs:long"/>
  </xs:complexType>

  <xs:complexType name="expirationType">
     <xs:attribute name="wakeUpInterval" type="xs:long"/>
     <xs:attribute name="lifespan" type="xs:long"/>
     <xs:attribute name="maxIdle" type="xs:long"/>
  </xs:complexType>

  <xs:complexType name="unsafeType">
     <xs:attribute name="unreliableReturnValues" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="clusteringType">
     <xs:all>
       <xs:element name="sync" type="tns:syncType" minOccurs="0"/>
       <xs:element name="stateRetrieval" type="tns:stateRetrievalType" minOccurs="0">
          <xs:annotation>
             <xs:documentation>Deprecated. Use stateTransfer instead.</xs:documentation>
          </xs:annotation>
       </xs:element>
       <xs:element name="l1" type="tns:l1Type" minOccurs="0">
         <xs:annotation>
            <xs:documentation>
               Configures the L1 cache behavior in 'distributed' caches instances. In any other cache modes, this element is ignored.
            </xs:documentation>
         </xs:annotation>
       </xs:element>
       <xs:element name="async" type="tns:asyncType" minOccurs="0">
         <xs:annotation>
            <xs:documentation>
               If configured all communications are asynchronous, in that whenever a thread sends a message sent over the wire, it does not wait for an acknowledgment before returning. Asynchronous configuration is mutually exclusive with synchronous configuration.
            </xs:documentation>
         </xs:annotation>
       </xs:element>
       <xs:element name="hash" type="tns:hashType" minOccurs="0">
          <xs:annotation>
             <xs:documentation>
                Configures distribution of keys between nodes in 'distributed' mode. In any other cache modes, this element is ignored.
             </xs:documentation>
          </xs:annotation>
       </xs:element>
       <xs:element name="stateTransfer" type="tns:stateTransferType" minOccurs="0">
          <xs:annotation>
             <xs:documentation>
                Configures how state is transferred when a cache joins or leaves the cluster. Used in distributed and
                replication clustered modes.
             </xs:documentation>
          </xs:annotation>
       </xs:element>
     </xs:all>
     <xs:attribute name="mode" type="xs:string">
      <xs:annotation>
         <xs:documentation>
            Cache mode. For distribution, set mode to either 'dist'. For replication, use 'repl'. Finally, for invalidation 'inv'. If the cache mode is set to 'local', the cache in question will not support clustering even if its cache manager does.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  <xs:complexType name="syncType">
     <xs:attribute name="replTimeout" type="xs:long"/>
  </xs:complexType>

  <xs:complexType name="stateRetrievalType">
     <xs:attribute name="alwaysProvideInMemoryState" type="xs:boolean">
        <xs:annotation>
           <xs:documentation>Deprecated. No longer used.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="fetchInMemoryState" type="xs:boolean">
        <xs:annotation>
           <xs:documentation>Deprecated. Use stateTransfer.fetchInMemoryState instead.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="initialRetryWaitTime" type="xs:long">
        <xs:annotation>
           <xs:documentation>Deprecated. No longer used.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="logFlushTimeout" type="xs:long">
        <xs:annotation>
           <xs:documentation>Deprecated. No longer used.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="maxNonProgressingLogWrites" type="xs:int">
        <xs:annotation>
           <xs:documentation>Deprecated. No longer used.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="numRetries" type="xs:int">
        <xs:annotation>
           <xs:documentation>Deprecated. No longer used.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="retryWaitTimeIncreaseFactor" type="xs:int">
        <xs:annotation>
           <xs:documentation>Deprecated. No longer used.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="timeout" type="xs:long">
        <xs:annotation>
           <xs:documentation>Deprecated. Use stateTransfer.timeout instead.</xs:documentation>
        </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  <xs:complexType name="l1Type">
     <xs:attribute name="enabled" type="xs:boolean">
      <xs:annotation>
         <xs:documentation>
            Enable the L1 cache.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
     <xs:attribute name="invalidationThreshold" type="xs:int">
      <xs:annotation>
         <xs:documentation>
            Determines whether a multicast or a web of unicasts are used when performing L1 invalidations. By default multicast will be used. If the threshold is set to -1, then unicasts will always be used. If the threshold is set to  0, then multicast will be always be used.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
     <xs:attribute name="lifespan" type="xs:long">
      <xs:annotation>
         <xs:documentation>
            Maximum lifespan of an entry placed in the L1 cache.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
     <xs:attribute name="onRehash" type="xs:boolean">
      <xs:annotation>
         <xs:documentation>
            If enabled, entries removed due to a rehash will be moved to L1 rather than being removed altogether.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  
  <xs:complexType name="asyncType">
     <xs:annotation>
      <xs:documentation>
         If configured all communications are asynchronous, in that whenever a thread sends a message sent over the wire, it does not wait for an acknowledgment before returning. &lt;async&gt; is mutually exclusive with the &lt;sync&gt;.
      </xs:documentation>
     </xs:annotation>
     <xs:attribute name="asyncMarshalling" type="xs:boolean">
      <xs:annotation>
         <xs:documentation>
            If true, asynchronous marshalling is enabled which means that caller can return even quicker, but it can suffer from reordering of operations. You can find more information at https://docs.jboss.org/author/display/ISPN/Asynchronous+Options
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
     <xs:attribute name="replQueueClass" type="xs:string">
      <xs:annotation>
         <xs:documentation>
            The replication queue in use, by default ReplicationQueueImpl.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
     <xs:attribute name="replQueueInterval" type="xs:long">
      <xs:annotation>
         <xs:documentation>
            If useReplQueue is set to true, this attribute controls how often the asynchronous thread used to flush the replication queue runs.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
     <xs:attribute name="replQueueMaxElements" type="xs:int">
      <xs:annotation>
         <xs:documentation>
            If useReplQueue is set to true, this attribute can be used to trigger flushing of the queue when it reaches a specific threshold.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
     <xs:attribute name="useReplQueue" type="xs:boolean">
      <xs:annotation>
         <xs:documentation>
            If true, forces all async communications to be queued up and sent out periodically as a batch.
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  <xs:complexType name="hashType">
        <xs:sequence>
          <xs:element name="groups" type="tns:groupsConfiguration" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="class" type="xs:string"/>
        <xs:attribute name="hashFunctionClass" type="xs:string"/>
        <xs:attribute name="numOwners" type="xs:int"/>
        <xs:attribute name="numVirtualNodes" type="xs:int"/>
        <xs:attribute name="rehashEnabled" type="xs:boolean">
           <xs:annotation>
              <xs:documentation>Deprecated. Use stateTransfer.fetchInMemoryState instead.</xs:documentation>
           </xs:annotation>
        </xs:attribute>
        <xs:attribute name="rehashRpcTimeout" type="xs:long">
           <xs:annotation>
              <xs:documentation>Deprecated. Use stateTransfer.timeout instead.</xs:documentation>
           </xs:annotation>
        </xs:attribute>
        <xs:attribute name="rehashWait" type="xs:long">
           <xs:annotation>
              <xs:documentation>Deprecated. No longer used.</xs:documentation>
           </xs:annotation>
        </xs:attribute>
  </xs:complexType>

  <xs:complexType name="stateTransferType">
     <xs:attribute name="fetchInMemoryState" type="xs:boolean">
        <xs:annotation>
           <xs:documentation>
              In replicated mode, it controls whether a new node joining the cache cluster receives existing data from
              the previous nodes.
              In distributed mode, it controls whether nodes transfer the keys that they no longer own to their new
              owners after a topology change.
              Ignored in invalidation mode.
           </xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="chunkSize" type="xs:int">
        <xs:annotation>
           <xs:documentation>
              If set to a value &gt; 0, the state transferred to other nodes is split in "chunks" of at most chunkSize
              cache entries.
           </xs:documentation>
        </xs:annotation>
     </xs:attribute>
     <xs:attribute name="timeout" type="xs:long">
        <xs:annotation>
           <xs:documentation>
              The maximum allowed duration for state transfers, in milliseconds.
           </xs:documentation>
        </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  <xs:complexType name="groupsConfiguration">
     <xs:sequence>
       <xs:element name="grouper" type="tns:grouperConfiguration" minOccurs="0" maxOccurs="unbounded"/>
     </xs:sequence>
     <xs:attribute name="enabled" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="grouperConfiguration">
     <xs:attribute name="class" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="jmxStatistics">
    <xs:attribute name="enabled" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="storeAsBinary">
     <xs:attribute name="storeKeysAsBinary" type="xs:boolean"/>
     <xs:attribute name="storeValuesAsBinary" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="lazyDeserialization">
    <xs:attribute name="enabled" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="invocationBatching">
    <xs:attribute name="enabled" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="deadlockDetectionType">
     <xs:attribute name="enabled" type="xs:boolean"/>
     <xs:attribute name="spinDuration" type="xs:long">
      <xs:annotation>
         <xs:documentation>
            Time period that determines how often is lock acquisition attempted within maximum time allowed to acquire a particular lock
         </xs:documentation>
      </xs:annotation>
     </xs:attribute>
  </xs:complexType>

  <xs:complexType name="queryConfigurationBean">
     <xs:sequence>
       <xs:element name="properties" type="tns:propertiesType" minOccurs="0"/>
     </xs:sequence>
     <xs:attribute name="enabled" type="xs:boolean"/>
     <xs:attribute name="indexLocalOnly" type="xs:boolean"/>
  </xs:complexType>

  <xs:simpleType name="shutdownHookBehavior">
    <xs:restriction base="xs:string">
      <xs:enumeration value="DEFAULT"/>
      <xs:enumeration value="REGISTER"/>
      <xs:enumeration value="DONT_REGISTER"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="isolationLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NONE"/>
      <xs:enumeration value="SERIALIZABLE"/>
      <xs:enumeration value="REPEATABLE_READ"/>
      <xs:enumeration value="READ_COMMITTED"/>
      <xs:enumeration value="READ_UNCOMMITTED"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="evictionStrategy">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NONE"/>
      <xs:enumeration value="UNORDERED"/>
      <xs:enumeration value="FIFO"/>
      <xs:enumeration value="LRU"/>
      <xs:enumeration value="LRU_OLD"/>
      <xs:enumeration value="LIRS"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="evictionThreadPolicy">
    <xs:restriction base="xs:string">
      <xs:enumeration value="PIGGYBACK"/>
      <xs:enumeration value="DEFAULT"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>

