<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:infinispan="http://www.infinispan.org/schemas/spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.infinispan.org/schemas/spring http://www.infinispan.org/schemas/infinispan-spring.xsd">

    <aop:config>
        <aop:advisor advice-ref="cacheAdvice" pointcut="execution(* org.infinispan.spring.provider.sample.service.CachedBookServiceImpl.*(..))"/>
    </aop:config>

    <cache:advice id="cacheAdvice">
        <cache:caching cache="books">
            <cache:cacheable method="findBook" key="#bookId"/>
            <cache:cacheable method="findBookBackup" cache="backup" key="#bookId"/>
            <cache:cacheable method="findBookCondition" key="#bookId" condition="#bookId > 1" />
            <cache:cacheable method="findBookUnless" key="#bookId" unless="#bookId > 1" />
            <cache:cacheable method="findBookCustomKeyGenerator" key-generator="singleArgKeyGenerator" />
            <cache:cacheable method="findBookCustomCacheResolver" cache="custom" />
            <cache:cacheable method="findBookCustomCacheManager" key="#bookId" cache-manager="cacheManager"/>

            <cache:cache-evict method="deleteBook" key="#bookId" />
            <cache:cache-evict method="deleteBookAllEntries" key="#bookId" all-entries="true" />
            <cache:cache-evict method="deleteBookCondition" key="#bookId" condition="#bookId > 1" />
            <cache:cache-evict method="deleteBookCustomKeyGenerator" key-generator="singleArgKeyGenerator" />
            <cache:cache-evict method="deleteBookCustomCacheResolver" key="#bookId" cache="custom" />
            <cache:cache-evict method="deleteBookCustomCacheManager" key="#bookId" cache-manager="cacheManager" />
            <cache:cache-evict method="deleteBookBeforeInvocation" key="#bookId" before-invocation="true" />

            <cache:cache-evict method="updateBook" key="#book.id" condition="#book.id != null" />

            <cache:cache-put method="createBook" key="#book.id" />
            <cache:cache-put method="createBookUnless" key="#book.id" unless="#book.isbn == '112-358-132'" />
            <cache:cache-put method="createBookCondition" key="#book.id" condition="#book.title == 'Path to Infinispan Enlightenment'" />
            <cache:cache-put method="createBookCustomKeyGenerator" key-generator="singleArgKeyGenerator" />
            <cache:cache-put method="createBookCustomCacheManager" key="#book.id" cache-manager="cacheManager" />
            <cache:cache-put method="createBookCustomCacheResolver" key="#book.id" cache="custom" />

            <cache:cache-put method="createBookCachingBackup" cache="books" key="#book.id"/>
            <cache:cache-put method="createBookCachingBackup" cache="backup" key="#book.id"/>

            <cache:cacheable method="findBookCachingBackup" cache="books" key="#bookId"/>
            <cache:cacheable method="findBookCachingBackup" cache="backup" key="#bookId"/>

            <cache:cache-evict method="deleteBookCachingBackup" cache="books" key="#bookId"/>
            <cache:cache-evict method="deleteBookCachingBackup" cache="backup" key="#bookId"/>
        </cache:caching>
    </cache:advice>

    <infinispan:embedded-cache-manager
            configuration="classpath:/org/infinispan/spring/provider/sample/books-infinispan-config.xml"/>

    <context:component-scan base-package="
        org.infinispan.spring.provider.sample.dao,
        org.infinispan.spring.provider.sample.generators,
        org.infinispan.spring.provider.sample.resolvers,
        org.infinispan.spring.provider.sample.service"/>

    <tx:annotation-driven/>

    <!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- DataSource configuration for Apache Commons DBCP. -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
          p:driverClassName="org.h2.Driver" p:url="jdbc:h2:mem:bookstoreXml"
          p:username="sa" p:password=""/>

    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="classpath:/org/infinispan/spring/provider/sample/initDB.sql"/>
        <jdbc:script location="classpath:/org/infinispan/spring/provider/sample/populateDB.sql"/>
    </jdbc:initialize-database>

</beans>
